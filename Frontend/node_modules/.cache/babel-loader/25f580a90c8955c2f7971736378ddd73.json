{"ast":null,"code":"/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n  queryString += String.fromCharCode(keyCode);\n  setTimeout(function () {\n    queryString = '';\n  }, 1000);\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n  if (prevElementId === elementId && prevString === queryString) {\n    for (var i = 0; i < matches.length; i++) {\n      if (matches[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n    }\n    index = index + 1;\n    return matches[index] ? matches[index] : matches[0];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches = [];\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n      if (i === -1) {\n        index = 0;\n      } else {\n        index = i;\n      }\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n      if (text.substr(0, strLength) === queryString) {\n        matches.push(listItems[index]);\n      }\n      i++;\n    } while (i !== selectedIndex);\n    prevString = queryString;\n    prevElementId = elementId;\n    return matches[0];\n  }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\nexport function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n    queryStr = escapeCharRegExp(queryStr);\n    var _loop_1 = function _loop_1(i, itemsData) {\n      var item = itemsData[i];\n      var text = void 0;\n      var filterValue;\n      if (items && dataSource) {\n        var checkField_1 = item;\n        var fieldValue_1 = fields.text.split('.');\n        dataSource.filter(function (data) {\n          Array.prototype.slice.call(fieldValue_1).forEach(function (value) {\n            /* eslint-disable security/detect-object-injection */\n            if (type === 'object' && !data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1 && checkField_1.getAttribute('data-value') === data[fields.value].toString() || type === 'string' && checkField_1.textContent.toString().indexOf(data) !== -1) {\n              filterValue = type === 'object' ? data[value] : data;\n            }\n          });\n        });\n      }\n      text = dataSource && filterValue ? (ignoreCase ? filterValue.toLocaleLowerCase() : filterValue).replace(/^\\s+|\\s+$/g, '') : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n      /* eslint-disable security/detect-non-literal-regexp */\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr || searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr || searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text)) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          value: {\n            item: item,\n            index: i\n          }\n        };\n      }\n    };\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var state_1 = _loop_1(i, itemsData);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    return itemData;\n    /* eslint-enable security/detect-non-literal-regexp */\n  }\n\n  return itemData;\n}\n/* eslint-enable security/detect-object-injection */\nexport function escapeCharRegExp(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport function resetIncrementalSearchValues(elementId) {\n  if (prevElementId === elementId) {\n    prevElementId = '';\n    prevString = '';\n    queryString = '';\n    matches = [];\n  }\n}","map":null,"metadata":{},"sourceType":"module"}