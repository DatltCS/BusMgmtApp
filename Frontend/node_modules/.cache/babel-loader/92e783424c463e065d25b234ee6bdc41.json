{"ast":null,"code":"import _slicedToArray from \"D:\\\\BusManagement\\\\bus_management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\BusManagement\\\\bus_management\\\\src\\\\components\\\\Main\\\\DropdownList.js\";\nimport React, { useState } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport './DropdownList.css'; // Import your custom CSS file\n\nfunction DropdownList() {\n  var _this = this;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    setIsOpen = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedOption = _useState4[0],\n    setSelectedOption = _useState4[1];\n  var options = ['Option 1', 'Option 2', 'Option 3'];\n  var handleOptionSelect = function handleOptionSelect(option) {\n    setSelectedOption(option);\n    setIsOpen(false); // Close the dropdown after an item is clicked\n  };\n\n  var handleToggle = function handleToggle() {\n    setIsOpen(!isOpen);\n  };\n  var handleOutsideClick = function handleOutsideClick(event) {\n    if (isOpen) {\n      if (!event.target.closest('.custom-dropdown-container')) {\n        setIsOpen(false);\n      }\n    }\n  };\n\n  // Attach event listener to handle clicks outside the dropdown\n  React.useEffect(function () {\n    window.addEventListener('mousedown', handleOutsideClick);\n    return function () {\n      window.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-dropdown-container \".concat(isOpen ? 'open' : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    className: \"custom-dropdown-toggle\",\n    id: \"dropdown-basic\",\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, selectedOption || 'Select an option'), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    className: \"custom-dropdown-menu \".concat(isOpen ? 'open' : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, options.map(function (option, index) {\n    return /*#__PURE__*/React.createElement(Dropdown.Item, {\n      key: index,\n      className: \"custom-dropdown-item\",\n      onClick: function onClick() {\n        return handleOptionSelect(option);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, option);\n  }))));\n}\nexport default DropdownList;","map":{"version":3,"names":["React","useState","Dropdown","DropdownList","_this","_useState","_useState2","_slicedToArray","isOpen","setIsOpen","_useState3","_useState4","selectedOption","setSelectedOption","options","handleOptionSelect","option","handleToggle","handleOutsideClick","event","target","closest","useEffect","window","addEventListener","removeEventListener","createElement","className","concat","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Toggle","id","onClick","Menu","map","index","Item","key"],"sources":["D:/BusManagement/bus_management/src/components/Main/DropdownList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport './DropdownList.css'; // Import your custom CSS file\r\n\r\nfunction DropdownList() {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n\r\n  const options = ['Option 1', 'Option 2', 'Option 3'];\r\n\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n    setIsOpen(false); // Close the dropdown after an item is clicked\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleOutsideClick = (event) => {\r\n    if (isOpen) {\r\n      if (!event.target.closest('.custom-dropdown-container')) {\r\n        setIsOpen(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Attach event listener to handle clicks outside the dropdown\r\n  React.useEffect(() => {\r\n    window.addEventListener('mousedown', handleOutsideClick);\r\n    return () => {\r\n      window.removeEventListener('mousedown', handleOutsideClick);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`custom-dropdown-container ${isOpen ? 'open' : ''}`}>\r\n      <Dropdown>\r\n        <Dropdown.Toggle className=\"custom-dropdown-toggle\" id=\"dropdown-basic\" onClick={handleToggle}>\r\n          {selectedOption || 'Select an option'}\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu className={`custom-dropdown-menu ${isOpen ? 'open' : ''}`}>\r\n          {options.map((option, index) => (\r\n            <Dropdown.Item\r\n              key={index}\r\n              className=\"custom-dropdown-item\"\r\n              onClick={() => handleOptionSelect(option)}\r\n            >\r\n              {option}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropdownList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}