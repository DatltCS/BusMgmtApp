{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Component, EventHandler, Property, Event, KeyboardEvents, rippleEffect } from '@syncfusion/ej2-base';\nimport { getUniqueID, compile as templateCompiler } from '@syncfusion/ej2-base';\nimport { isVisible, closest, attributes, detach, select, addClass, removeClass, append } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, ChildProperty, Collection, Animation } from '@syncfusion/ej2-base';\nimport { setStyleAttribute as setStyle, Complex } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined as isNOU, formatUnit, selectAll, SanitizeHtmlHelper, isRippleEnabled } from '@syncfusion/ej2-base';\nvar CLS_ACRDN_ROOT = 'e-acrdn-root';\nvar CLS_ROOT = 'e-accordion';\nvar CLS_ITEM = 'e-acrdn-item';\nvar CLS_ITEMFOCUS = 'e-item-focus';\nvar CLS_ITEMHIDE = 'e-hide';\nvar CLS_HEADER = 'e-acrdn-header';\nvar CLS_HEADERICN = 'e-acrdn-header-icon';\nvar CLS_HEADERCTN = 'e-acrdn-header-content';\nvar CLS_CONTENT = 'e-acrdn-panel';\nvar CLS_CTENT = 'e-acrdn-content';\nvar CLS_TOOGLEICN = 'e-toggle-icon';\nvar CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';\nvar CLS_EXPANDICN = 'e-expand-icon';\nvar CLS_RTL = 'e-rtl';\nvar CLS_CTNHIDE = 'e-content-hide';\nvar CLS_SLCT = 'e-select';\nvar CLS_SLCTED = 'e-selected';\nvar CLS_ACTIVE = 'e-active';\nvar CLS_ANIMATE = 'e-animate';\nvar CLS_DISABLE = 'e-overlay';\nvar CLS_TOGANIMATE = 'e-toggle-animation';\nvar CLS_NEST = 'e-nested';\nvar CLS_EXPANDSTATE = 'e-expand-state';\nvar CLS_CONTAINER = 'e-accordion-container';\n/**\n * Objects used for configuring the Accordion expanding item action properties.\n */\nvar AccordionActionSettings = /** @class */function (_super) {\n  __extends(AccordionActionSettings, _super);\n  function AccordionActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('SlideDown')], AccordionActionSettings.prototype, \"effect\", void 0);\n  __decorate([Property(400)], AccordionActionSettings.prototype, \"duration\", void 0);\n  __decorate([Property('linear')], AccordionActionSettings.prototype, \"easing\", void 0);\n  return AccordionActionSettings;\n}(ChildProperty);\nexport { AccordionActionSettings };\n/**\n * Objects used for configuring the Accordion animation properties.\n */\nvar AccordionAnimationSettings = /** @class */function (_super) {\n  __extends(AccordionAnimationSettings, _super);\n  function AccordionAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, AccordionActionSettings)], AccordionAnimationSettings.prototype, \"collapse\", void 0);\n  __decorate([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, AccordionActionSettings)], AccordionAnimationSettings.prototype, \"expand\", void 0);\n  return AccordionAnimationSettings;\n}(ChildProperty);\nexport { AccordionAnimationSettings };\n/**\n * An item object that is used to configure Accordion items.\n */\nvar AccordionItem = /** @class */function (_super) {\n  __extends(AccordionItem, _super);\n  function AccordionItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], AccordionItem.prototype, \"content\", void 0);\n  __decorate([Property(null)], AccordionItem.prototype, \"header\", void 0);\n  __decorate([Property(null)], AccordionItem.prototype, \"cssClass\", void 0);\n  __decorate([Property(null)], AccordionItem.prototype, \"iconCss\", void 0);\n  __decorate([Property(false)], AccordionItem.prototype, \"expanded\", void 0);\n  __decorate([Property(true)], AccordionItem.prototype, \"visible\", void 0);\n  __decorate([Property(false)], AccordionItem.prototype, \"disabled\", void 0);\n  __decorate([Property()], AccordionItem.prototype, \"id\", void 0);\n  return AccordionItem;\n}(ChildProperty);\nexport { AccordionItem };\n/**\n * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.\n * ```html\n * <div id='accordion'/>\n * <script>\n *   var accordionObj = new Accordion();\n *   accordionObj.appendTo('#accordion');\n * </script>\n * ```\n */\nvar Accordion = /** @class */function (_super) {\n  __extends(Accordion, _super);\n  /**\n   * Initializes a new instance of the Accordion class.\n   *\n   * @param {AccordionModel} options  - Specifies Accordion model properties as options.\n   * @param {string | HTMLElement} element  - Specifies the element that is rendered as an Accordion.\n   */\n  function Accordion(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /**\n     * Contains the keyboard configuration of the Accordion.\n     */\n    _this.keyConfigs = {\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      enter: 'enter',\n      space: 'space',\n      home: 'home',\n      end: 'end'\n    };\n    return _this;\n  }\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   *\n   * @returns {void}\n   */\n  Accordion.prototype.destroy = function () {\n    if (this.isReact || this.isAngular || this.isVue) {\n      this.clearTemplate();\n    }\n    var ele = this.element;\n    _super.prototype.destroy.call(this);\n    this.unwireEvents();\n    this.isDestroy = true;\n    this.restoreContent(null);\n    [].slice.call(ele.children).forEach(function (el) {\n      ele.removeChild(el);\n    });\n    if (this.trgtEle) {\n      this.trgtEle = null;\n      while (this.ctrlTem.firstElementChild) {\n        ele.appendChild(this.ctrlTem.firstElementChild);\n      }\n      this.ctrlTem = null;\n    }\n    ele.classList.remove(CLS_ACRDN_ROOT);\n    ele.removeAttribute('style');\n    this.element.removeAttribute('data-ripple');\n    if (!this.isNested && isRippleEnabled) {\n      this.removeRippleEffect();\n    }\n  };\n  Accordion.prototype.preRender = function () {\n    var nested = closest(this.element, '.' + CLS_CONTENT);\n    this.isNested = false;\n    this.templateEle = [];\n    if (!this.isDestroy) {\n      this.isDestroy = false;\n    }\n    if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {\n      if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT)) {\n        nested.classList.add(CLS_NEST);\n        this.isNested = true;\n      }\n    } else {\n      this.element.classList.add(CLS_ACRDN_ROOT);\n    }\n    if (this.enableRtl) {\n      this.add(this.element, CLS_RTL);\n    }\n  };\n  Accordion.prototype.add = function (ele, val) {\n    ele.classList.add(val);\n  };\n  Accordion.prototype.remove = function (ele, val) {\n    ele.classList.remove(val);\n  };\n  /**\n   * To initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n  Accordion.prototype.render = function () {\n    this.initializeHeaderTemplate();\n    this.initializeItemTemplate();\n    this.initialize();\n    this.renderControl();\n    this.wireEvents();\n    this.renderComplete();\n  };\n  Accordion.prototype.initialize = function () {\n    var width = formatUnit(this.width);\n    var height = formatUnit(this.height);\n    setStyle(this.element, {\n      'width': width,\n      'height': height\n    });\n    if (isNOU(this.initExpand)) {\n      this.initExpand = [];\n    }\n    if (this.expandedIndices.length > 0) {\n      this.initExpand = this.expandedIndices;\n    }\n  };\n  Accordion.prototype.renderControl = function () {\n    this.trgtEle = this.element.children.length > 0 ? select('div', this.element) : null;\n    this.renderItems();\n    this.initItemExpand();\n  };\n  Accordion.prototype.wireFocusEvents = function () {\n    var acrdItem = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM));\n    for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {\n      var item = acrdItem_1[_i];\n      var headerEle = item.querySelector('.' + CLS_HEADER);\n      if (item.childElementCount > 0 && headerEle) {\n        EventHandler.clearEvents(headerEle);\n        EventHandler.add(headerEle, 'focus', this.focusIn, this);\n        EventHandler.add(headerEle, 'blur', this.focusOut, this);\n      }\n    }\n  };\n  Accordion.prototype.unwireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    if (!isNOU(this.keyModule)) {\n      this.keyModule.destroy();\n    }\n  };\n  Accordion.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    if (!this.isNested && !this.isDestroy) {\n      this.removeRippleEffect = rippleEffect(this.element, {\n        selector: '.' + CLS_HEADER\n      });\n    }\n    if (!this.isNested) {\n      this.keyModule = new KeyboardEvents(this.element, {\n        keyAction: this.keyActionHandler.bind(this),\n        keyConfigs: this.keyConfigs,\n        eventName: 'keydown'\n      });\n    }\n  };\n  Accordion.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n          return templateCompiler(document.querySelector(template).innerHTML.trim());\n        } else {\n          return templateCompiler(template);\n        }\n      } catch (error) {\n        return templateCompiler(template);\n      }\n    }\n    return undefined;\n  };\n  Accordion.prototype.initializeHeaderTemplate = function () {\n    if (this.headerTemplate) {\n      this.headerTemplateFn = this.templateParser(this.headerTemplate);\n    }\n  };\n  Accordion.prototype.initializeItemTemplate = function () {\n    if (this.itemTemplate) {\n      this.itemTemplateFn = this.templateParser(this.itemTemplate);\n    }\n  };\n  Accordion.prototype.getHeaderTemplate = function () {\n    return this.headerTemplateFn;\n  };\n  Accordion.prototype.getItemTemplate = function () {\n    return this.itemTemplateFn;\n  };\n  Accordion.prototype.focusIn = function (e) {\n    e.target.parentElement.classList.add(CLS_ITEMFOCUS);\n  };\n  Accordion.prototype.focusOut = function (e) {\n    e.target.parentElement.classList.remove(CLS_ITEMFOCUS);\n  };\n  Accordion.prototype.ctrlTemplate = function () {\n    this.ctrlTem = this.element.cloneNode(true);\n    var innerEles;\n    var rootEle = select('.' + CLS_CONTAINER, this.element);\n    if (rootEle) {\n      innerEles = rootEle.children;\n    } else {\n      innerEles = this.element.children;\n    }\n    var items = [];\n    [].slice.call(innerEles).forEach(function (el) {\n      items.push({\n        header: el.childElementCount > 0 && el.children[0] ? el.children[0] : '',\n        content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ''\n      });\n      el.parentNode.removeChild(el);\n    });\n    if (rootEle) {\n      this.element.removeChild(rootEle);\n    }\n    this.setProperties({\n      items: items\n    }, true);\n  };\n  Accordion.prototype.toggleIconGenerate = function () {\n    var tglIcon = this.createElement('div', {\n      className: CLS_TOOGLEICN\n    });\n    var hdrColIcon = this.createElement('span', {\n      className: CLS_COLLAPSEICN\n    });\n    tglIcon.appendChild(hdrColIcon);\n    return tglIcon;\n  };\n  Accordion.prototype.initItemExpand = function () {\n    var len = this.initExpand.length;\n    if (len === 0) {\n      return;\n    }\n    if (this.expandMode === 'Single') {\n      this.expandItem(true, this.initExpand[len - 1]);\n    } else {\n      for (var i = 0; i < len; i++) {\n        this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);\n      }\n    }\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  Accordion.prototype.renderItems = function () {\n    var _this = this;\n    var ele = this.element;\n    var innerItem;\n    var innerDataSourceItem;\n    if (!isNOU(this.trgtEle)) {\n      this.ctrlTemplate();\n    }\n    if (this.dataSource.length > 0) {\n      this.dataSource.forEach(function (item, index) {\n        innerDataSourceItem = _this.renderInnerItem(item, index);\n        ele.appendChild(innerDataSourceItem);\n        if (innerDataSourceItem.childElementCount > 0) {\n          EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);\n          EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);\n        }\n      });\n    } else {\n      var items = this.items;\n      if (ele && items.length > 0) {\n        items.forEach(function (item, index) {\n          innerItem = _this.renderInnerItem(item, index);\n          ele.appendChild(innerItem);\n          if (innerItem.childElementCount > 0) {\n            EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);\n            EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);\n          }\n        });\n      }\n    }\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  Accordion.prototype.clickHandler = function (e) {\n    var trgt = e.target;\n    var items = this.getItems();\n    var eventArgs = {};\n    var tglIcon;\n    var acrdEle = closest(trgt, '.' + CLS_ROOT);\n    if (acrdEle !== this.element) {\n      return;\n    }\n    trgt.classList.add('e-target');\n    var acrdnItem = closest(trgt, '.' + CLS_ITEM);\n    var acrdnHdr = closest(trgt, '.' + CLS_HEADER);\n    var acrdnCtn = closest(trgt, '.' + CLS_CONTENT);\n    if (acrdnItem && (isNOU(acrdnHdr) || isNOU(acrdnCtn))) {\n      acrdnHdr = acrdnItem.children[0];\n      acrdnCtn = acrdnItem.children[1];\n    }\n    if (acrdnHdr) {\n      tglIcon = select('.' + CLS_TOOGLEICN, acrdnHdr);\n    }\n    var acrdnCtnItem;\n    if (acrdnHdr) {\n      acrdnCtnItem = closest(acrdnHdr, '.' + CLS_ITEM);\n    } else if (acrdnCtn) {\n      acrdnCtnItem = closest(acrdnCtn, '.' + CLS_ITEM);\n    }\n    var index = this.getIndexByItem(acrdnItem);\n    if (acrdnCtnItem) {\n      eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];\n    }\n    eventArgs.originalEvent = e;\n    var ctnCheck = !isNOU(tglIcon) && acrdnItem.childElementCount <= 1;\n    if (ctnCheck && (isNOU(acrdnCtn) || !isNOU(select('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {\n      acrdnItem.appendChild(this.contentRendering(index));\n      this.ariaAttrUpdate(acrdnItem);\n      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n    } else {\n      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n    }\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  Accordion.prototype.afterContentRender = function (trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {\n    var _this = this;\n    var acrdActive = [];\n    this.trigger('clicked', eventArgs);\n    var cntclkCheck = acrdnCtn && !isNOU(select('.e-target', acrdnCtn));\n    var inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT;\n    var inlineEleAcrdn = acrdnCtn && !isNOU(select('.' + CLS_ROOT, acrdnCtn)) && isNOU(closest(trgt, inlineAcrdnSel));\n    var nestContCheck = acrdnCtn && isNOU(select('.' + CLS_ROOT, acrdnCtn)) || !(closest(trgt, '.' + CLS_ROOT) === this.element);\n    cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);\n    trgt.classList.remove('e-target');\n    if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {\n      return;\n    }\n    var acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);\n    var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;\n    [].slice.call(acrdnchild).forEach(function (el) {\n      if (el.classList.contains(CLS_ACTIVE)) {\n        acrdActive.push(el);\n      }\n    });\n    var acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM + ' [' + CLS_ANIMATE + ']'));\n    if (acrdAniEle.length > 0) {\n      for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {\n        var el = acrdAniEle_1[_i];\n        acrdActive.push(el.parentElement);\n      }\n    }\n    var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';\n    var sameHeader = false;\n    if (!isNOU(acrdnItem) && !isNOU(acrdnHdr)) {\n      var acrdnCtn_1 = select('.' + CLS_CONTENT, acrdnItem);\n      var acrdnRoot = closest(acrdnItem, '.' + CLS_ACRDN_ROOT);\n      var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n      if (isNOU(acrdnCtn_1)) {\n        return;\n      }\n      sameHeader = expandState === acrdnItem;\n      if (isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {\n        this.collapse(acrdnCtn_1);\n      } else {\n        if (acrdActive.length > 0 && this.expandMode === 'Single' && !sameContentCheck) {\n          acrdActive.forEach(function (el) {\n            _this.collapse(select('.' + CLS_CONTENT, el));\n            el.classList.remove(CLS_EXPANDSTATE);\n          });\n        }\n        this.expand(acrdnCtn_1);\n      }\n      if (!isNOU(expandState) && !sameHeader) {\n        expandState.classList.remove(CLS_EXPANDSTATE);\n      }\n    }\n  };\n  Accordion.prototype.eleMoveFocus = function (action, root, trgt) {\n    var clst;\n    var clstItem = closest(trgt, '.' + CLS_ITEM);\n    if (trgt === root) {\n      clst = (action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER);\n    } else if (trgt.classList.contains(CLS_HEADER)) {\n      clstItem = action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling;\n      if (clstItem) {\n        clst = select('.' + CLS_HEADER, clstItem);\n      }\n    }\n    if (clst) {\n      clst.focus();\n    }\n  };\n  Accordion.prototype.keyActionHandler = function (e) {\n    var trgt = e.target;\n    var header = closest(e.target, CLS_HEADER);\n    if (isNOU(header) && !trgt.classList.contains(CLS_ROOT) && !trgt.classList.contains(CLS_HEADER)) {\n      return;\n    }\n    var clst;\n    var root = this.element;\n    var content;\n    switch (e.action) {\n      case 'moveUp':\n        this.eleMoveFocus(e.action, root, trgt);\n        break;\n      case 'moveDown':\n        this.eleMoveFocus(e.action, root, trgt);\n        break;\n      case 'space':\n      case 'enter':\n        content = trgt.nextElementSibling;\n        if (!isNOU(content) && content.classList.contains(CLS_CONTENT)) {\n          if (content.getAttribute('e-animate') !== 'true') {\n            trgt.click();\n          }\n        } else {\n          trgt.click();\n        }\n        e.preventDefault();\n        break;\n      case 'home':\n      case 'end':\n        clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];\n        clst.focus();\n        e.preventDefault();\n        break;\n    }\n  };\n  Accordion.prototype.headerEleGenerate = function () {\n    var header = this.createElement('div', {\n      className: CLS_HEADER,\n      id: getUniqueID('acrdn_header')\n    });\n    var ariaAttr = {\n      'tabindex': '0',\n      'role': 'button',\n      'aria-disabled': 'false',\n      'aria-expanded': 'false'\n    };\n    attributes(header, ariaAttr);\n    return header;\n  };\n  Accordion.prototype.renderInnerItem = function (item, index) {\n    var innerEle = this.createElement('div', {\n      className: CLS_ITEM,\n      id: item.id || getUniqueID('acrdn_item')\n    });\n    if (this.headerTemplate) {\n      var ctnEle = this.headerEleGenerate();\n      var hdrEle = this.createElement('div', {\n        className: CLS_HEADERCTN\n      });\n      ctnEle.appendChild(hdrEle);\n      append(this.getHeaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);\n      innerEle.appendChild(ctnEle);\n      ctnEle.appendChild(this.toggleIconGenerate());\n      this.add(innerEle, CLS_SLCT);\n      return innerEle;\n    }\n    if (item.header && this.angularnativeCondiCheck(item, 'header')) {\n      if (this.enableHtmlSanitizer && typeof item.header === 'string') {\n        item.header = SanitizeHtmlHelper.sanitize(item.header);\n      }\n      var ctnEle = this.headerEleGenerate();\n      var hdrEle = this.createElement('div', {\n        className: CLS_HEADERCTN\n      });\n      ctnEle.appendChild(hdrEle);\n      ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));\n      innerEle.appendChild(ctnEle);\n    }\n    var hdr = select('.' + CLS_HEADER, innerEle);\n    if (item.expanded && !isNOU(index) && !this.enablePersistence) {\n      if (this.initExpand.indexOf(index) === -1) {\n        this.initExpand.push(index);\n      }\n    }\n    if (item.cssClass) {\n      addClass([innerEle], item.cssClass.split(' '));\n    }\n    if (item.disabled) {\n      addClass([innerEle], CLS_DISABLE);\n    }\n    if (item.visible === false) {\n      addClass([innerEle], CLS_ITEMHIDE);\n    }\n    if (item.iconCss) {\n      var hdrIcnEle = this.createElement('div', {\n        className: CLS_HEADERICN\n      });\n      var icon = this.createElement('span', {\n        className: item.iconCss + ' e-icons'\n      });\n      hdrIcnEle.appendChild(icon);\n      if (isNOU(hdr)) {\n        hdr = this.headerEleGenerate();\n        hdr.appendChild(hdrIcnEle);\n        innerEle.appendChild(hdr);\n      } else {\n        hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);\n      }\n    }\n    if (item.content && this.angularnativeCondiCheck(item, 'content')) {\n      var hdrIcon = this.toggleIconGenerate();\n      if (isNOU(hdr)) {\n        hdr = this.headerEleGenerate();\n        innerEle.appendChild(hdr);\n      }\n      hdr.appendChild(hdrIcon);\n      this.add(innerEle, CLS_SLCT);\n    }\n    return innerEle;\n  };\n  Accordion.prototype.angularnativeCondiCheck = function (item, prop) {\n    var property = prop === 'content' ? item.content : item.header;\n    var content = property;\n    if (this.isAngular && !isNOU(content.elementRef)) {\n      var data = content.elementRef.nativeElement.data;\n      if (isNOU(data) || data === '' || data.indexOf('bindings=') === -1) {\n        return true;\n      }\n      var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));\n      if (!isNOU(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Accordion.prototype.fetchElement = function (ele, value, index, isHeader) {\n    var templateFn;\n    var temString;\n    try {\n      if (document.querySelectorAll(value).length && value !== 'Button') {\n        var eleVal = document.querySelector(value);\n        temString = eleVal.outerHTML.trim();\n        ele.appendChild(eleVal);\n        eleVal.style.display = '';\n      } else {\n        templateFn = templateCompiler(value);\n      }\n    } catch (e) {\n      if (typeof value === 'string') {\n        ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n      } else if (!isNOU(this.trgtEle) && value instanceof HTMLElement) {\n        ele.appendChild(value);\n        ele.firstElementChild.style.display = '';\n      } else {\n        templateFn = templateCompiler(value);\n      }\n    }\n    var tempArray;\n    if (!isNOU(templateFn)) {\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n      var templateProps = void 0;\n      var templateName = void 0;\n      if (ele.classList.contains(CLS_HEADERCTN)) {\n        templateProps = this.element.id + index + '_header';\n        templateName = 'header';\n      } else if (ele.classList.contains(CLS_CTENT)) {\n        templateProps = this.element.id + index + '_content';\n        templateName = 'content';\n      }\n      tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);\n    }\n    if (!isNOU(tempArray) && tempArray.length > 0 && !(isNOU(tempArray[0].tagName) && tempArray.length === 1)) {\n      [].slice.call(tempArray).forEach(function (el) {\n        if (!isNOU(el.tagName)) {\n          el.style.display = '';\n        }\n        ele.appendChild(el);\n      });\n    } else if (ele.childElementCount === 0) {\n      ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n    }\n    if (!isNOU(temString)) {\n      if (this.templateEle.indexOf(value) === -1) {\n        this.templateEle.push(value);\n      }\n    }\n    return ele;\n  };\n  Accordion.prototype.ariaAttrUpdate = function (itemEle) {\n    var header = select('.' + CLS_HEADER, itemEle);\n    var content = select('.' + CLS_CONTENT, itemEle);\n    header.setAttribute('aria-controls', content.id);\n    content.setAttribute('aria-labelledby', header.id);\n    content.setAttribute('role', 'region');\n  };\n  Accordion.prototype.contentRendering = function (index) {\n    var itemcnt = this.createElement('div', {\n      className: CLS_CONTENT + ' ' + CLS_CTNHIDE,\n      id: getUniqueID('acrdn_panel')\n    });\n    attributes(itemcnt, {\n      'aria-hidden': 'true'\n    });\n    var ctn = this.createElement('div', {\n      className: CLS_CTENT\n    });\n    if (this.dataSource.length > 0) {\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n      append(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);\n      itemcnt.appendChild(ctn);\n    } else {\n      if (this.enableHtmlSanitizer && typeof this.items[parseInt(index.toString(), 10)].content) {\n        this.items[parseInt(index.toString(), 10)].content = SanitizeHtmlHelper.sanitize(this.items[parseInt(index.toString(), 10)].content);\n      }\n      itemcnt.appendChild(this.fetchElement(ctn, this.items[parseInt(index.toString(), 10)].content, index, false));\n    }\n    return itemcnt;\n  };\n  Accordion.prototype.expand = function (trgt) {\n    var _this = this;\n    var items = this.getItems();\n    var trgtItemEle = closest(trgt, '.' + CLS_ITEM);\n    if (isNOU(trgt) || isVisible(trgt) && trgt.getAttribute('e-animate') !== 'true' || trgtItemEle.classList.contains(CLS_DISABLE)) {\n      return;\n    }\n    var acrdnRoot = closest(trgtItemEle, '.' + CLS_ACRDN_ROOT);\n    var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n    var animation = {\n      name: this.animation.expand.effect,\n      duration: this.animation.expand.duration,\n      timingFunction: this.animation.expand.easing\n    };\n    var icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n    var eventArgs = {\n      element: trgtItemEle,\n      item: items[this.getIndexByItem(trgtItemEle)],\n      index: this.getIndexByItem(trgtItemEle),\n      content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n      isExpanded: true\n    };\n    this.trigger('expanding', eventArgs, function (expandArgs) {\n      if (!expandArgs.cancel) {\n        icon.classList.add(CLS_TOGANIMATE);\n        _this.expandedItemsPush(trgtItemEle);\n        if (!isNOU(expandState)) {\n          expandState.classList.remove(CLS_EXPANDSTATE);\n        }\n        trgtItemEle.classList.add(CLS_EXPANDSTATE);\n        if (animation.name === 'None') {\n          _this.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n          _this.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);\n        } else {\n          _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);\n        }\n      }\n    });\n  };\n  Accordion.prototype.expandAnimation = function (ef, icn, trgt, trgtItemEle, animate, args) {\n    var _this = this;\n    var height;\n    this.lastActiveItemId = trgtItemEle.id;\n    if (ef === 'SlideDown') {\n      animate.begin = function () {\n        _this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n        trgt.style.position = 'absolute';\n        height = trgtItemEle.offsetHeight;\n        trgt.style.maxHeight = trgt.offsetHeight + 'px';\n        trgtItemEle.style.maxHeight = '';\n      };\n      animate.progress = function () {\n        trgtItemEle.style.minHeight = height + trgt.offsetHeight + 'px';\n      };\n      animate.end = function () {\n        setStyle(trgt, {\n          'position': '',\n          'maxHeight': ''\n        });\n        trgtItemEle.style.minHeight = '';\n        _this.expandProgress('end', icn, trgt, trgtItemEle, args);\n      };\n    } else {\n      animate.begin = function () {\n        _this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n      };\n      animate.end = function () {\n        _this.expandProgress('end', icn, trgt, trgtItemEle, args);\n      };\n    }\n    new Animation(animate).animate(trgt);\n  };\n  Accordion.prototype.expandProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {\n    this.remove(trgt, CLS_CTNHIDE);\n    this.add(trgtItemEle, CLS_SLCTED);\n    this.add(icon, CLS_EXPANDICN);\n    if (progress === 'end') {\n      this.add(trgtItemEle, CLS_ACTIVE);\n      trgt.setAttribute('aria-hidden', 'false');\n      attributes(trgt.previousElementSibling, {\n        'aria-expanded': 'true'\n      });\n      icon.classList.remove(CLS_TOGANIMATE);\n      this.trigger('expanded', eventArgs);\n    }\n  };\n  Accordion.prototype.expandedItemsPush = function (item) {\n    var index = this.getIndexByItem(item);\n    if (this.expandedIndices.indexOf(index) === -1) {\n      var temp = [].slice.call(this.expandedIndices);\n      temp.push(index);\n      this.setProperties({\n        expandedIndices: temp\n      }, true);\n    }\n  };\n  Accordion.prototype.getIndexByItem = function (item) {\n    var itemEle = this.getItemElements();\n    return [].slice.call(itemEle).indexOf(item);\n  };\n  Accordion.prototype.getItemElements = function () {\n    var itemEle = [];\n    var itemCollection = this.element.children;\n    [].slice.call(itemCollection).forEach(function (el) {\n      if (el.classList.contains(CLS_ITEM)) {\n        itemEle.push(el);\n      }\n    });\n    return itemEle;\n  };\n  Accordion.prototype.expandedItemsPop = function (item) {\n    var index = this.getIndexByItem(item);\n    var temp = [].slice.call(this.expandedIndices);\n    temp.splice(temp.indexOf(index), 1);\n    this.setProperties({\n      expandedIndices: temp\n    }, true);\n  };\n  Accordion.prototype.collapse = function (trgt) {\n    var _this = this;\n    var items = this.getItems();\n    var trgtItemEle = closest(trgt, '.' + CLS_ITEM);\n    if (isNOU(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE)) {\n      return;\n    }\n    var animation = {\n      name: this.animation.collapse.effect,\n      duration: this.animation.collapse.duration,\n      timingFunction: this.animation.collapse.easing\n    };\n    var icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n    var eventArgs = {\n      element: trgtItemEle,\n      item: items[this.getIndexByItem(trgtItemEle)],\n      index: this.getIndexByItem(trgtItemEle),\n      content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n      isExpanded: false\n    };\n    this.trigger('expanding', eventArgs, function (expandArgs) {\n      if (!expandArgs.cancel) {\n        _this.expandedItemsPop(trgtItemEle);\n        trgtItemEle.classList.remove(CLS_EXPANDSTATE);\n        icon.classList.add(CLS_TOGANIMATE);\n        if (animation.name === 'None') {\n          _this.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n          _this.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);\n        } else {\n          _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);\n        }\n      }\n    });\n  };\n  Accordion.prototype.collapseAnimation = function (ef, trgt, trgtItEl, icn, animate, args) {\n    var _this = this;\n    var height;\n    var trgtHeight;\n    var itemHeight;\n    var remain;\n    this.lastActiveItemId = trgtItEl.id;\n    if (ef === 'SlideUp') {\n      animate.begin = function () {\n        itemHeight = trgtItEl.offsetHeight;\n        trgtItEl.style.minHeight = itemHeight + 'px';\n        trgt.style.position = 'absolute';\n        height = trgtItEl.offsetHeight;\n        trgtHeight = trgt.offsetHeight;\n        trgt.style.maxHeight = trgtHeight + 'px';\n        _this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n      };\n      animate.progress = function () {\n        remain = height - (trgtHeight - trgt.offsetHeight);\n        if (remain < itemHeight) {\n          trgtItEl.style.minHeight = remain + 'px';\n        }\n      };\n      animate.end = function () {\n        trgt.style.display = 'none';\n        _this.collapseProgress('end', icn, trgt, trgtItEl, args);\n        trgtItEl.style.minHeight = '';\n        setStyle(trgt, {\n          'position': '',\n          'maxHeight': '',\n          'display': ''\n        });\n      };\n    } else {\n      animate.begin = function () {\n        _this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n      };\n      animate.end = function () {\n        _this.collapseProgress('end', icn, trgt, trgtItEl, args);\n      };\n    }\n    new Animation(animate).animate(trgt);\n  };\n  Accordion.prototype.collapseProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {\n    this.remove(icon, CLS_EXPANDICN);\n    this.remove(trgtItemEle, CLS_SLCTED);\n    if (progress === 'end') {\n      this.add(trgt, CLS_CTNHIDE);\n      icon.classList.remove(CLS_TOGANIMATE);\n      this.remove(trgtItemEle, CLS_ACTIVE);\n      trgt.setAttribute('aria-hidden', 'true');\n      attributes(trgt.previousElementSibling, {\n        'aria-expanded': 'false'\n      });\n      this.trigger('expanded', eventArgs);\n    }\n  };\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - It returns the current module name.\n   * @private\n   */\n  Accordion.prototype.getModuleName = function () {\n    return 'accordion';\n  };\n  Accordion.prototype.getItems = function () {\n    var items;\n    if (this.itemTemplate && this.headerTemplate) {\n      items = this.dataSource;\n    } else {\n      items = this.items;\n    }\n    return items;\n  };\n  /**\n   * Adds new item to the Accordion with the specified index of the Accordion.\n   *\n   * @param  {AccordionItemModel | AccordionItemModel[] | Object | Object[]} item - Item array that is to be added to the Accordion.\n   * @param  {number} index - Number value that determines where the item should be added.\n   * By default, item is added at the last index if the index is not specified.\n   * @returns {void}\n   */\n  Accordion.prototype.addItem = function (item, index) {\n    var _this = this;\n    var ele = this.element;\n    var itemEle = this.getItemElements();\n    var items = this.getItems();\n    if (isNOU(index)) {\n      index = items.length;\n    }\n    if (ele.childElementCount >= index) {\n      var addItems = item instanceof Array ? item : [item];\n      addItems.forEach(function (addItem, i) {\n        var itemIndex = index + i;\n        items.splice(itemIndex, 0, addItem);\n        var innerItemEle = _this.renderInnerItem(addItem, itemIndex);\n        if (ele.childElementCount === itemIndex) {\n          ele.appendChild(innerItemEle);\n        } else {\n          ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);\n        }\n        EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);\n        EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);\n        _this.expandedIndices = [];\n        _this.expandedItemRefresh(ele);\n        if (addItem && addItem.expanded) {\n          _this.expandItem(true, itemIndex);\n        }\n      });\n    }\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Accordion.prototype.expandedItemRefresh = function (ele) {\n    var _this = this;\n    var itemEle = this.getItemElements();\n    [].slice.call(itemEle).forEach(function (el) {\n      if (el.classList.contains(CLS_SLCTED)) {\n        _this.expandedItemsPush(el);\n      }\n    });\n  };\n  /**\n   * Dynamically removes item from Accordion.\n   *\n   * @param  {number} index - Number value that determines which item should be removed.\n   * @returns {void}.\n   */\n  Accordion.prototype.removeItem = function (index) {\n    if (this.isReact) {\n      this.clearTemplate(['headerTemplate', 'itemTemplate'], index);\n    }\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n    var items = this.getItems();\n    if (isNOU(ele)) {\n      return;\n    }\n    this.restoreContent(index);\n    detach(ele);\n    items.splice(index, 1);\n    this.expandedIndices = [];\n    this.expandedItemRefresh(this.element);\n  };\n  /**\n   * Sets focus to the specified index item header in Accordion.\n   *\n   * @param  {number} index - Number value that determines which item should be focused.\n   * @returns {void}.\n   */\n  Accordion.prototype.select = function (index) {\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n    if (isNOU(ele) || isNOU(select('.' + CLS_HEADER, ele))) {\n      return;\n    }\n    ele.children[0].focus();\n  };\n  /**\n   * Shows or hides the specified item from Accordion.\n   *\n   * @param  {number} index - Number value that determines which item should be hidden/shown.\n   * @param  {boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.\n   * If the `isHidden` value is false, the item is shown or else item it is hidden.\n   * @returns {void}.\n   */\n  Accordion.prototype.hideItem = function (index, isHidden) {\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n    if (isNOU(ele)) {\n      return;\n    }\n    if (isNOU(isHidden)) {\n      isHidden = true;\n    }\n    if (isHidden) {\n      this.add(ele, CLS_ITEMHIDE);\n    } else {\n      this.remove(ele, CLS_ITEMHIDE);\n    }\n  };\n  /**\n   * Enables/Disables the specified Accordion item.\n   *\n   * @param  {number} index - Number value that determines which item should be enabled/disabled.\n   * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).\n   * If the `isEnable` value is true, the item is enabled or else it is disabled.\n   * @returns {void}.\n   */\n  Accordion.prototype.enableItem = function (index, isEnable) {\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n    if (isNOU(ele)) {\n      return;\n    }\n    var eleHeader = ele.firstElementChild;\n    if (isEnable) {\n      this.remove(ele, CLS_DISABLE);\n      attributes(eleHeader, {\n        'tabindex': '0',\n        'aria-disabled': 'false'\n      });\n      eleHeader.focus();\n    } else {\n      if (ele.classList.contains(CLS_ACTIVE)) {\n        this.expandItem(false, index);\n        this.eleMoveFocus('movedown', this.element, eleHeader);\n      }\n      this.add(ele, CLS_DISABLE);\n      eleHeader.setAttribute('aria-disabled', 'true');\n      eleHeader.removeAttribute('tabindex');\n    }\n  };\n  /**\n   * Expands/Collapses the specified Accordion item.\n   *\n   * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.\n   * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.\n   * Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.\n   * @returns {void}.\n   */\n  Accordion.prototype.expandItem = function (isExpand, index) {\n    var _this = this;\n    var itemEle = this.getItemElements();\n    if (isNOU(index)) {\n      if (this.expandMode === 'Single' && isExpand) {\n        var ele = itemEle[itemEle.length - 1];\n        this.itemExpand(isExpand, ele, this.getIndexByItem(ele));\n      } else {\n        var item = select('#' + this.lastActiveItemId, this.element);\n        [].slice.call(itemEle).forEach(function (el) {\n          _this.itemExpand(isExpand, el, _this.getIndexByItem(el));\n          el.classList.remove(CLS_EXPANDSTATE);\n        });\n        var expandedItem = select('.' + CLS_EXPANDSTATE, this.element);\n        if (expandedItem) {\n          expandedItem.classList.remove(CLS_EXPANDSTATE);\n        }\n        if (item) {\n          item.classList.add(CLS_EXPANDSTATE);\n        }\n      }\n    } else {\n      var ele = itemEle[parseInt(index.toString(), 10)];\n      if (isNOU(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {\n        return;\n      } else {\n        if (this.expandMode === 'Single') {\n          this.expandItem(false);\n        }\n        this.itemExpand(isExpand, ele, index);\n      }\n    }\n  };\n  Accordion.prototype.itemExpand = function (isExpand, ele, index) {\n    var ctn = ele.children[1];\n    if (ele.classList.contains(CLS_DISABLE)) {\n      return;\n    }\n    if (isNOU(ctn) && isExpand) {\n      ctn = this.contentRendering(index);\n      ele.appendChild(ctn);\n      this.ariaAttrUpdate(ele);\n      this.expand(ctn);\n    } else if (!isNOU(ctn)) {\n      if (isExpand) {\n        this.expand(ctn);\n      } else {\n        this.collapse(ctn);\n      }\n    }\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  Accordion.prototype.destroyItems = function () {\n    this.restoreContent(null);\n    if (this.isReact || this.isAngular || this.isVue) {\n      this.clearTemplate();\n    }\n    [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {\n      detach(el);\n    });\n  };\n  Accordion.prototype.restoreContent = function (index) {\n    var ctnElePos;\n    if (isNOU(index)) {\n      ctnElePos = this.element;\n    } else {\n      ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM)[parseInt(index.toString(), 10)];\n    }\n    this.templateEle.forEach(function (eleStr) {\n      if (!isNOU(ctnElePos.querySelector(eleStr))) {\n        document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';\n      }\n    });\n  };\n  Accordion.prototype.updateItem = function (item, index) {\n    if (!isNOU(item)) {\n      var items = this.getItems();\n      var itemObj = items[parseInt(index.toString(), 10)];\n      items.splice(index, 1);\n      this.restoreContent(index);\n      var header = select('.' + CLS_HEADERCTN, item);\n      var content = select('.' + CLS_CTENT, item);\n      if (this.isReact || this.isAngular) {\n        this.clearAccordionTemplate(header, 'header', CLS_HEADERCTN);\n        this.clearAccordionTemplate(content, 'content', CLS_CTENT);\n      }\n      detach(item);\n      this.addItem(itemObj, index);\n    }\n  };\n  Accordion.prototype.setTemplate = function (template, toElement, index) {\n    toElement.innerHTML = '';\n    this.templateCompile(toElement, template, index);\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  Accordion.prototype.templateCompile = function (ele, cnt, index) {\n    var tempEle = this.createElement('div');\n    this.fetchElement(tempEle, cnt, index, false);\n    if (tempEle.childNodes.length !== 0) {\n      [].slice.call(tempEle.childNodes).forEach(function (childEle) {\n        ele.appendChild(childEle);\n      });\n    }\n  };\n  Accordion.prototype.clearAccordionTemplate = function (templateEle, templateName, className) {\n    if (this.registeredTemplate && this.registeredTemplate[\"\" + templateName]) {\n      var registeredTemplates = this.registeredTemplate;\n      for (var index = 0; index < registeredTemplates[\"\" + templateName].length; index++) {\n        var registeredItem = registeredTemplates[\"\" + templateName][parseInt(index.toString(), 10)].rootNodes[0];\n        var closestItem = closest(registeredItem.containerInfo, '.' + className);\n        if (!isNOU(closestItem) && closestItem === templateEle) {\n          this.clearTemplate([templateName], [registeredTemplates[\"\" + templateName][parseInt(index.toString(), 10)]]);\n          break;\n        }\n      }\n    } else if (this.portals && this.portals.length > 0) {\n      var portals = this.portals;\n      for (var index = 0; index < portals.length; index++) {\n        var portalItem = portals[parseInt(index.toString(), 10)];\n        var closestItem = closest(portalItem.containerInfo, '.' + className);\n        if (!isNOU(closestItem) && closestItem === templateEle) {\n          this.clearTemplate([templateName], index);\n          break;\n        }\n      }\n    }\n  };\n  Accordion.prototype.getPersistData = function () {\n    var keyEntity = ['expandedIndices'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n   *\n   * @param  {AccordionModel} newProp - It contains the new value of data.\n   * @param  {AccordionModel} oldProp - It contains the old value of data.\n   * @returns {void}\n   * @private\n   */\n  Accordion.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var acrdn = this.element;\n    var isRefresh = false;\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      switch (prop) {\n        case 'items':\n          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            var changedProp = Object.keys(newProp.items);\n            for (var j = 0; j < changedProp.length; j++) {\n              var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);\n              var property = Object.keys(newProp.items[parseInt(index.toString(), 10)]);\n              for (var k = 0; k < property.length; k++) {\n                var item = selectAll('.' + CLS_ITEM, this.element)[parseInt(index.toString(), 10)];\n                var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])[\"\" + property[parseInt(k.toString(), 10)]];\n                var newVal = Object(newProp.items[parseInt(index.toString(), 10)])[\"\" + property[parseInt(k.toString(), 10)]];\n                var temp = property[parseInt(k.toString(), 10)];\n                var content = select('.' + CLS_CTENT, item);\n                if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || temp === 'content' && oldVal === '') {\n                  this.updateItem(item, index);\n                }\n                if (property[parseInt(k.toString(), 10)] === 'cssClass' && !isNOU(item)) {\n                  if (oldVal) {\n                    removeClass([item], oldVal.split(' '));\n                  }\n                  if (newVal) {\n                    addClass([item], newVal.split(' '));\n                  }\n                }\n                if (property[parseInt(k.toString(), 10)] === 'visible' && !isNOU(item)) {\n                  if (Object(newProp.items[parseInt(index.toString(), 10)])[\"\" + property[parseInt(k.toString(), 10)]] === false) {\n                    item.classList.add(CLS_ITEMHIDE);\n                  } else {\n                    item.classList.remove(CLS_ITEMHIDE);\n                  }\n                }\n                if (property[parseInt(k.toString(), 10)] === 'disabled' && !isNOU(item)) {\n                  this.enableItem(index, !newVal);\n                }\n                if (property[parseInt(k.toString(), 10)] === 'content' && !isNOU(item) && item.children.length === 2) {\n                  if (typeof newVal === 'function') {\n                    if (this.isAngular || this.isReact) {\n                      this.clearAccordionTemplate(content, property[parseInt(k.toString(), 10)], CLS_CTENT);\n                    }\n                    var activeContent = item.querySelector('.' + CLS_CTENT);\n                    activeContent.innerHTML = '';\n                    this.setTemplate(newVal, activeContent, index);\n                  } else {\n                    if (item.classList.contains(CLS_SLCTED)) {\n                      this.expandItem(false, index);\n                    }\n                    detach(item.querySelector('.' + CLS_CONTENT));\n                  }\n                }\n              }\n            }\n          } else {\n            isRefresh = true;\n          }\n          break;\n        case 'dataSource':\n        case 'expandedIndices':\n          if (this.expandedIndices === null) {\n            this.expandedIndices = [];\n          }\n          isRefresh = true;\n          break;\n        case 'headerTemplate':\n          this.initializeHeaderTemplate();\n          isRefresh = true;\n          break;\n        case 'itemTemplate':\n          this.initializeItemTemplate();\n          isRefresh = true;\n          break;\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.add(acrdn, CLS_RTL);\n          } else {\n            this.remove(acrdn, CLS_RTL);\n          }\n          break;\n        case 'height':\n          setStyle(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n        case 'width':\n          setStyle(this.element, {\n            'width': formatUnit(newProp.width)\n          });\n          break;\n        case 'expandMode':\n          if (newProp.expandMode === 'Single' && this.expandedIndices.length > 1) {\n            this.expandItem(false);\n          }\n          break;\n      }\n    }\n    if (isRefresh) {\n      this.initExpand = [];\n      if (this.expandedIndices.length > 0) {\n        this.initExpand = this.expandedIndices;\n      }\n      this.destroyItems();\n      this.renderItems();\n      this.initItemExpand();\n    }\n  };\n  __decorate([Collection([], AccordionItem)], Accordion.prototype, \"items\", void 0);\n  __decorate([Property([])], Accordion.prototype, \"dataSource\", void 0);\n  __decorate([Property()], Accordion.prototype, \"itemTemplate\", void 0);\n  __decorate([Property()], Accordion.prototype, \"headerTemplate\", void 0);\n  __decorate([Property('100%')], Accordion.prototype, \"width\", void 0);\n  __decorate([Property('auto')], Accordion.prototype, \"height\", void 0);\n  __decorate([Property([])], Accordion.prototype, \"expandedIndices\", void 0);\n  __decorate([Property('Multiple')], Accordion.prototype, \"expandMode\", void 0);\n  __decorate([Property(false)], Accordion.prototype, \"enableHtmlSanitizer\", void 0);\n  __decorate([Complex({}, AccordionAnimationSettings)], Accordion.prototype, \"animation\", void 0);\n  __decorate([Event()], Accordion.prototype, \"clicked\", void 0);\n  __decorate([Event()], Accordion.prototype, \"expanding\", void 0);\n  __decorate([Event()], Accordion.prototype, \"expanded\", void 0);\n  __decorate([Event()], Accordion.prototype, \"created\", void 0);\n  __decorate([Event()], Accordion.prototype, \"destroyed\", void 0);\n  Accordion = __decorate([NotifyPropertyChanges], Accordion);\n  return Accordion;\n}(Component);\nexport { Accordion };","map":null,"metadata":{},"sourceType":"module"}