{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Component, EventHandler, Property, Event } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, isVisible, closest, attributes, detach, classList, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { selectAll, setStyleAttribute as setStyle, select } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined as isNOU, getUniqueID, formatUnit, Collection, compile as templateCompiler } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, ChildProperty, Browser, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { calculatePosition } from '@syncfusion/ej2-popups';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { HScroll } from '../common/h-scroll';\nimport { VScroll } from '../common/v-scroll';\nvar CLS_VERTICAL = 'e-vertical';\nvar CLS_ITEMS = 'e-toolbar-items';\nvar CLS_ITEM = 'e-toolbar-item';\nvar CLS_RTL = 'e-rtl';\nvar CLS_SEPARATOR = 'e-separator';\nvar CLS_POPUPICON = 'e-popup-up-icon';\nvar CLS_POPUPDOWN = 'e-popup-down-icon';\nvar CLS_POPUPOPEN = 'e-popup-open';\nvar CLS_TEMPLATE = 'e-template';\nvar CLS_DISABLE = 'e-overlay';\nvar CLS_POPUPTEXT = 'e-toolbar-text';\nvar CLS_TBARTEXT = 'e-popup-text';\nvar CLS_TBAROVERFLOW = 'e-overflow-show';\nvar CLS_POPOVERFLOW = 'e-overflow-hide';\nvar CLS_TBARBTN = 'e-tbar-btn';\nvar CLS_TBARNAV = 'e-hor-nav';\nvar CLS_TBARSCRLNAV = 'e-scroll-nav';\nvar CLS_TBARRIGHT = 'e-toolbar-right';\nvar CLS_TBARLEFT = 'e-toolbar-left';\nvar CLS_TBARCENTER = 'e-toolbar-center';\nvar CLS_TBARPOS = 'e-tbar-pos';\nvar CLS_HSCROLLCNT = 'e-hscroll-content';\nvar CLS_VSCROLLCNT = 'e-vscroll-content';\nvar CLS_HSCROLLBAR = 'e-hscroll-bar';\nvar CLS_POPUPNAV = 'e-hor-nav';\nvar CLS_POPUPCLASS = 'e-toolbar-pop';\nvar CLS_POPUP = 'e-toolbar-popup';\nvar CLS_TBARBTNTEXT = 'e-tbar-btn-text';\nvar CLS_TBARNAVACT = 'e-nav-active';\nvar CLS_TBARIGNORE = 'e-ignore';\nvar CLS_POPPRI = 'e-popup-alone';\nvar CLS_HIDDEN = 'e-hidden';\nvar CLS_MULTIROW = 'e-toolbar-multirow';\nvar CLS_MULTIROWPOS = 'e-multirow-pos';\nvar CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';\nvar CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';\nvar CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';\nvar CLS_EXTENDABLECLASS = 'e-toolbar-extended';\nvar CLS_EXTENDPOPUP = 'e-expended-nav';\nvar CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';\n/**\n * An item object that is used to configure Toolbar commands.\n */\nvar Item = /** @class */function (_super) {\n  __extends(Item, _super);\n  function Item() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('')], Item.prototype, \"id\", void 0);\n  __decorate([Property('')], Item.prototype, \"text\", void 0);\n  __decorate([Property('auto')], Item.prototype, \"width\", void 0);\n  __decorate([Property('')], Item.prototype, \"cssClass\", void 0);\n  __decorate([Property(false)], Item.prototype, \"showAlwaysInPopup\", void 0);\n  __decorate([Property(false)], Item.prototype, \"disabled\", void 0);\n  __decorate([Property('')], Item.prototype, \"prefixIcon\", void 0);\n  __decorate([Property('')], Item.prototype, \"suffixIcon\", void 0);\n  __decorate([Property(true)], Item.prototype, \"visible\", void 0);\n  __decorate([Property('None')], Item.prototype, \"overflow\", void 0);\n  __decorate([Property('')], Item.prototype, \"template\", void 0);\n  __decorate([Property('Button')], Item.prototype, \"type\", void 0);\n  __decorate([Property('Both')], Item.prototype, \"showTextOn\", void 0);\n  __decorate([Property(null)], Item.prototype, \"htmlAttributes\", void 0);\n  __decorate([Property('')], Item.prototype, \"tooltipText\", void 0);\n  __decorate([Property('Left')], Item.prototype, \"align\", void 0);\n  __decorate([Event()], Item.prototype, \"click\", void 0);\n  __decorate([Property(-1)], Item.prototype, \"tabIndex\", void 0);\n  return Item;\n}(ChildProperty);\nexport { Item };\n/**\n * The Toolbar control contains a group of commands that are aligned horizontally.\n * ```html\n * <div id=\"toolbar\"/>\n * <script>\n *   var toolbarObj = new Toolbar();\n *   toolbarObj.appendTo(\"#toolbar\");\n * </script>\n * ```\n */\nvar Toolbar = /** @class */function (_super) {\n  __extends(Toolbar, _super);\n  /**\n   * Initializes a new instance of the Toolbar class.\n   *\n   * @param {ToolbarModel} options  - Specifies Toolbar model properties as options.\n   * @param { string | HTMLElement} element  - Specifies the element that is rendered as a Toolbar.\n   */\n  function Toolbar(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    _this.resizeContext = _this.resize.bind(_this);\n    _this.orientationChangeContext = _this.orientationChange.bind(_this);\n    /**\n     * Contains the keyboard configuration of the Toolbar.\n     */\n    _this.keyConfigs = {\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      popupOpen: 'enter',\n      popupClose: 'escape',\n      tab: 'tab',\n      home: 'home',\n      end: 'end'\n    };\n    return _this;\n  }\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   *\n   * @returns {void}.\n   */\n  Toolbar.prototype.destroy = function () {\n    var _this = this;\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n    var btnItems = this.element.querySelectorAll('.e-control.e-btn');\n    [].slice.call(btnItems).forEach(function (el) {\n      if (!isNOU(el) && !isNOU(el.ej2_instances) && !isNOU(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {\n        el.ej2_instances[0].destroy();\n      }\n    });\n    this.unwireEvents();\n    this.tempId.forEach(function (ele) {\n      if (!isNOU(_this.element.querySelector(ele))) {\n        document.body.appendChild(_this.element.querySelector(ele)).style.display = 'none';\n      }\n    });\n    this.destroyItems();\n    while (this.element.lastElementChild) {\n      this.element.removeChild(this.element.lastElementChild);\n    }\n    if (this.trgtEle) {\n      this.element.appendChild(this.ctrlTem);\n      this.trgtEle = null;\n      this.ctrlTem = null;\n    }\n    if (this.popObj) {\n      this.popObj.destroy();\n      detach(this.popObj.element);\n    }\n    if (this.activeEle) {\n      this.activeEle = null;\n    }\n    this.popObj = null;\n    this.tbarAlign = null;\n    this.tbarItemsCol = [];\n    this.remove(this.element, 'e-toolpop');\n    if (this.cssClass) {\n      removeClass([this.element], this.cssClass.split(' '));\n    }\n    this.element.removeAttribute('style');\n    ['aria-disabled', 'aria-orientation', 'role'].forEach(function (attrb) {\n      return _this.element.removeAttribute(attrb);\n    });\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   * @returns {void}\n   */\n  Toolbar.prototype.preRender = function () {\n    var eventArgs = {\n      enableCollision: this.enableCollision,\n      scrollStep: this.scrollStep\n    };\n    this.trigger('beforeCreate', eventArgs);\n    this.enableCollision = eventArgs.enableCollision;\n    this.scrollStep = eventArgs.scrollStep;\n    this.scrollModule = null;\n    this.popObj = null;\n    this.tempId = [];\n    this.tbarItemsCol = this.items;\n    this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;\n    this.isExtendedOpen = false;\n    this.popupPriCount = 0;\n    if (this.enableRtl) {\n      this.add(this.element, CLS_RTL);\n    }\n  };\n  Toolbar.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    window.addEventListener('resize', this.resizeContext);\n    window.addEventListener('orientationchange', this.orientationChangeContext);\n    if (this.allowKeyboard) {\n      this.wireKeyboardEvent();\n    }\n  };\n  Toolbar.prototype.wireKeyboardEvent = function () {\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n    EventHandler.add(this.element, 'keydown', this.docKeyDown, this);\n    this.updateTabIndex('0');\n  };\n  Toolbar.prototype.updateTabIndex = function (tabIndex) {\n    var ele = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');\n    if (!isNOU(ele) && !isNOU(ele.firstElementChild)) {\n      var dataTabIndex = ele.firstElementChild.getAttribute('data-tabindex');\n      if (dataTabIndex && dataTabIndex === '-1' && ele.firstElementChild.tagName !== 'INPUT') {\n        ele.firstElementChild.setAttribute('tabindex', tabIndex);\n      }\n    }\n  };\n  Toolbar.prototype.unwireKeyboardEvent = function () {\n    if (this.keyModule) {\n      EventHandler.remove(this.element, 'keydown', this.docKeyDown);\n      this.keyModule.destroy();\n      this.keyModule = null;\n    }\n  };\n  Toolbar.prototype.docKeyDown = function (e) {\n    if (e.target.tagName === 'INPUT') {\n      return;\n    }\n    var popCheck = !isNOU(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== 'Extended';\n    if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {\n      this.popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    }\n    var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;\n    if (keyCheck) {\n      e.preventDefault();\n    }\n  };\n  Toolbar.prototype.unwireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    this.destroyScroll();\n    this.unwireKeyboardEvent();\n    window.removeEventListener('resize', this.resizeContext);\n    window.removeEventListener('orientationchange', this.orientationChangeContext);\n    EventHandler.remove(document, 'scroll', this.docEvent);\n    EventHandler.remove(document, 'click', this.docEvent);\n  };\n  Toolbar.prototype.clearProperty = function () {\n    this.tbarEle = [];\n    this.tbarAlgEle = {\n      lefts: [],\n      centers: [],\n      rights: []\n    };\n  };\n  Toolbar.prototype.docEvent = function (e) {\n    var popEle = closest(e.target, '.e-popup');\n    if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {\n      this.popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    }\n  };\n  Toolbar.prototype.destroyScroll = function () {\n    if (this.scrollModule) {\n      if (this.tbarAlign) {\n        this.add(this.scrollModule.element, CLS_TBARPOS);\n      }\n      this.scrollModule.destroy();\n      this.scrollModule = null;\n    }\n  };\n  Toolbar.prototype.destroyItems = function () {\n    if (this.element) {\n      [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {\n        detach(el);\n      });\n    }\n    if (this.tbarAlign) {\n      var tbarItems = this.element.querySelector('.' + CLS_ITEMS);\n      [].slice.call(tbarItems.children).forEach(function (el) {\n        detach(el);\n      });\n      this.tbarAlign = false;\n      this.remove(tbarItems, CLS_TBARPOS);\n    }\n    this.clearProperty();\n  };\n  Toolbar.prototype.destroyMode = function () {\n    if (this.scrollModule) {\n      this.remove(this.scrollModule.element, CLS_RTL);\n      this.destroyScroll();\n    }\n    this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n    this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);\n    var tempEle = this.element.querySelector('.e-toolbar-multirow');\n    if (tempEle) {\n      this.remove(tempEle, CLS_MULTIROW);\n    }\n    if (this.popObj) {\n      this.popupRefresh(this.popObj.element, true);\n    }\n  };\n  Toolbar.prototype.add = function (ele, val) {\n    ele.classList.add(val);\n  };\n  Toolbar.prototype.remove = function (ele, val) {\n    ele.classList.remove(val);\n  };\n  Toolbar.prototype.elementFocus = function (ele) {\n    var fChild = ele.firstElementChild;\n    if (fChild) {\n      fChild.focus();\n      this.activeEleSwitch(ele);\n    } else {\n      ele.focus();\n    }\n  };\n  Toolbar.prototype.clstElement = function (tbrNavChk, trgt) {\n    var clst;\n    if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {\n      clst = this.popObj.element.querySelector('.' + CLS_ITEM);\n    } else if (this.element === trgt || tbrNavChk) {\n      clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');\n    } else {\n      clst = closest(trgt, '.' + CLS_ITEM);\n    }\n    return clst;\n  };\n  Toolbar.prototype.keyHandling = function (clst, e, trgt, navChk, scrollChk) {\n    var popObj = this.popObj;\n    var rootEle = this.element;\n    var popAnimate = {\n      name: 'FadeOut',\n      duration: 100\n    };\n    var value = e.action === 'moveUp' ? 'previous' : 'next';\n    var ele;\n    var nodes;\n    switch (e.action) {\n      case 'moveRight':\n        if (this.isVertical) {\n          return;\n        }\n        if (rootEle === trgt) {\n          this.elementFocus(clst);\n        } else if (!navChk) {\n          this.eleFocus(clst, 'next');\n        }\n        break;\n      case 'moveLeft':\n        if (this.isVertical) {\n          return;\n        }\n        if (!navChk) {\n          this.eleFocus(clst, 'previous');\n        }\n        break;\n      case 'home':\n      case 'end':\n        if (clst) {\n          var popupCheck = closest(clst, '.e-popup');\n          var extendedPopup = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n          if (this.overflowMode === 'Extended' && extendedPopup && extendedPopup.classList.contains('e-popup-open')) {\n            popupCheck = e.action === 'end' ? extendedPopup : null;\n          }\n          if (popupCheck) {\n            if (isVisible(this.popObj.element)) {\n              nodes = [].slice.call(popupCheck.children);\n              if (e.action === 'home') {\n                ele = this.focusFirstVisibleEle(nodes);\n              } else {\n                ele = this.focusLastVisibleEle(nodes);\n              }\n            }\n          } else {\n            nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')');\n            if (e.action === 'home') {\n              ele = this.focusFirstVisibleEle(nodes);\n            } else {\n              ele = this.focusLastVisibleEle(nodes);\n            }\n          }\n          if (ele) {\n            this.elementFocus(ele);\n          }\n        }\n        break;\n      case 'moveUp':\n      case 'moveDown':\n        if (!this.isVertical) {\n          if (popObj && closest(trgt, '.e-popup')) {\n            var popEle = popObj.element;\n            var popFrstEle = popEle.firstElementChild;\n            if (value === 'previous' && popFrstEle === clst) {\n              popEle.lastElementChild.firstChild.focus();\n            } else if (value === 'next' && popEle.lastElementChild === clst) {\n              popFrstEle.firstChild.focus();\n            } else {\n              this.eleFocus(clst, value);\n            }\n          } else if (e.action === 'moveDown' && popObj && isVisible(popObj.element)) {\n            this.elementFocus(clst);\n          }\n        } else {\n          if (e.action === 'moveUp') {\n            this.eleFocus(clst, 'previous');\n          } else {\n            this.eleFocus(clst, 'next');\n          }\n        }\n        break;\n      case 'tab':\n        if (!scrollChk && !navChk) {\n          var ele_1 = clst.firstElementChild;\n          if (rootEle === trgt) {\n            if (this.activeEle) {\n              this.activeEle.focus();\n            } else {\n              this.activeEleRemove(ele_1);\n              ele_1.focus();\n            }\n          }\n        }\n        break;\n      case 'popupClose':\n        if (popObj && this.overflowMode !== 'Extended') {\n          popObj.hide(popAnimate);\n        }\n        break;\n      case 'popupOpen':\n        if (!navChk) {\n          return;\n        }\n        if (popObj && !isVisible(popObj.element)) {\n          popObj.element.style.top = rootEle.offsetHeight + 'px';\n          popObj.show({\n            name: 'FadeIn',\n            duration: 100\n          });\n        } else {\n          popObj.hide(popAnimate);\n        }\n        break;\n    }\n  };\n  Toolbar.prototype.keyActionHandler = function (e) {\n    var trgt = e.target;\n    if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE)) {\n      return;\n    }\n    e.preventDefault();\n    var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);\n    var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);\n    var clst = this.clstElement(tbrNavChk, trgt);\n    if (clst || tbarScrollChk) {\n      this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);\n    }\n  };\n  /**\n   * Specifies the value to disable/enable the Toolbar component.\n   * When set to `true`, the component will be disabled.\n   *\n   * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).\n   * @returns {void}.\n   */\n  Toolbar.prototype.disable = function (value) {\n    var rootEle = this.element;\n    if (value) {\n      rootEle.classList.add(CLS_DISABLE);\n    } else {\n      rootEle.classList.remove(CLS_DISABLE);\n    }\n    if (this.activeEle) {\n      this.activeEle.setAttribute('tabindex', this.activeEle.getAttribute('data-tabindex'));\n    }\n    if (this.scrollModule) {\n      this.scrollModule.disable(value);\n    }\n    if (this.popObj) {\n      if (isVisible(this.popObj.element) && this.overflowMode !== 'Extended') {\n        this.popObj.hide();\n      }\n      rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');\n    }\n  };\n  Toolbar.prototype.eleContains = function (el) {\n    return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !isVisible(el) || !el.classList.contains(CLS_ITEM);\n  };\n  Toolbar.prototype.focusFirstVisibleEle = function (nodes) {\n    var element;\n    var index = 0;\n    while (index < nodes.length) {\n      var ele = nodes[parseInt(index.toString(), 10)];\n      if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE)) {\n        return ele;\n      }\n      index++;\n    }\n    return element;\n  };\n  Toolbar.prototype.focusLastVisibleEle = function (nodes) {\n    var element;\n    var index = nodes.length - 1;\n    while (index >= 0) {\n      var ele = nodes[parseInt(index.toString(), 10)];\n      if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE)) {\n        return ele;\n      }\n      index--;\n    }\n    return element;\n  };\n  Toolbar.prototype.eleFocus = function (closest, pos) {\n    var sib = Object(closest)[pos + 'ElementSibling'];\n    if (sib) {\n      var skipEle = this.eleContains(sib);\n      if (skipEle) {\n        this.eleFocus(sib, pos);\n        return;\n      }\n      this.elementFocus(sib);\n    } else if (this.tbarAlign) {\n      var elem = Object(closest.parentElement)[pos + 'ElementSibling'];\n      if (!isNOU(elem) && elem.children.length === 0) {\n        elem = Object(elem)[pos + 'ElementSibling'];\n      }\n      if (!isNOU(elem) && elem.children.length > 0) {\n        if (pos === 'next') {\n          var el = elem.querySelector('.' + CLS_ITEM);\n          if (this.eleContains(el)) {\n            this.eleFocus(el, pos);\n          } else {\n            el.firstElementChild.focus();\n            this.activeEleSwitch(el);\n          }\n        } else {\n          var el = elem.lastElementChild;\n          if (this.eleContains(el)) {\n            this.eleFocus(el, pos);\n          } else {\n            this.elementFocus(el);\n          }\n        }\n      }\n    } else if (!isNOU(closest)) {\n      var tbrItems = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')' + ':not(.' + CLS_DISABLE + ')' + ':not(.' + CLS_HIDDEN + ')');\n      if (pos === 'next' && tbrItems) {\n        this.elementFocus(tbrItems[0]);\n      } else if (pos === 'previous' && tbrItems) {\n        this.elementFocus(tbrItems[tbrItems.length - 1]);\n      }\n    }\n  };\n  Toolbar.prototype.clickHandler = function (e) {\n    var _this = this;\n    var trgt = e.target;\n    var ele = this.element;\n    var isPopupElement = !isNOU(closest(trgt, '.' + CLS_POPUPCLASS));\n    var clsList = trgt.classList;\n    var popupNav = closest(trgt, '.' + CLS_TBARNAV);\n    if (!popupNav) {\n      popupNav = trgt;\n    }\n    if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV)) {\n      clsList = trgt.querySelector('.e-icons').classList;\n    }\n    if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {\n      this.popupClickHandler(ele, popupNav, CLS_RTL);\n    }\n    var itemObj;\n    var clst = closest(e.target, '.' + CLS_ITEM);\n    if ((isNOU(clst) || clst.classList.contains(CLS_DISABLE)) && !popupNav.classList.contains(CLS_TBARNAV)) {\n      return;\n    }\n    if (clst) {\n      var tempItem = this.items[this.tbarEle.indexOf(clst)];\n      itemObj = tempItem;\n    }\n    var eventArgs = {\n      originalEvent: e,\n      item: itemObj\n    };\n    if (itemObj && !isNOU(itemObj.click)) {\n      this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);\n    }\n    if (!eventArgs.cancel) {\n      this.trigger('clicked', eventArgs, function (clickedArgs) {\n        if (!isNOU(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === 'Popup' && clickedArgs.item && clickedArgs.item.type !== 'Input') {\n          _this.popObj.hide({\n            name: 'FadeOut',\n            duration: 100\n          });\n        }\n      });\n    }\n  };\n  Toolbar.prototype.popupClickHandler = function (ele, popupNav, CLS_RTL) {\n    var popObj = this.popObj;\n    if (isVisible(popObj.element)) {\n      popupNav.classList.remove(CLS_TBARNAVACT);\n      popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    } else {\n      if (ele.classList.contains(CLS_RTL)) {\n        popObj.enableRtl = true;\n        popObj.position = {\n          X: 'left',\n          Y: 'top'\n        };\n      }\n      if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {\n        popObj.enableRtl = false;\n        popObj.position = {\n          X: 'right',\n          Y: 'top'\n        };\n      }\n      popObj.dataBind();\n      popObj.refreshPosition();\n      popObj.element.style.top = this.getElementOffsetY() + 'px';\n      if (this.overflowMode === 'Extended') {\n        popObj.element.style.minHeight = '0px';\n      }\n      popupNav.classList.add(CLS_TBARNAVACT);\n      popObj.show({\n        name: 'FadeIn',\n        duration: 100\n      });\n    }\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n  Toolbar.prototype.render = function () {\n    this.initialize();\n    this.renderControl();\n    this.wireEvents();\n    this.renderComplete();\n  };\n  Toolbar.prototype.initialize = function () {\n    var width = formatUnit(this.width);\n    var height = formatUnit(this.height);\n    if (Browser.info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {\n      setStyle(this.element, {\n        'height': height\n      });\n    }\n    setStyle(this.element, {\n      'width': width\n    });\n    var ariaAttr = {\n      'role': 'toolbar',\n      'aria-disabled': 'false',\n      'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'\n    };\n    attributes(this.element, ariaAttr);\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n  };\n  Toolbar.prototype.renderControl = function () {\n    var ele = this.element;\n    this.trgtEle = ele.children.length > 0 ? ele.querySelector('div') : null;\n    this.tbarAlgEle = {\n      lefts: [],\n      centers: [],\n      rights: []\n    };\n    this.renderItems();\n    this.renderLayout();\n  };\n  Toolbar.prototype.renderLayout = function () {\n    this.renderOverflowMode();\n    if (this.tbarAlign) {\n      this.itemPositioning();\n    }\n    if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {\n      this.popupRefresh(this.popObj.element, false);\n    }\n    this.separator();\n  };\n  Toolbar.prototype.itemsAlign = function (items, itemEleDom) {\n    var innerItem;\n    var innerPos;\n    if (!this.tbarEle) {\n      this.tbarEle = [];\n    }\n    for (var i = 0; i < items.length; i++) {\n      innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);\n      if (this.tbarEle.indexOf(innerItem) === -1) {\n        this.tbarEle.push(innerItem);\n      }\n      if (!this.tbarAlign) {\n        this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);\n      }\n      innerPos = itemEleDom.querySelector('.e-toolbar-' + items[parseInt(i.toString(), 10)].align.toLowerCase());\n      if (innerPos) {\n        if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== 'Show')) {\n          this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + 's').toLowerCase()].push(innerItem);\n        }\n        innerPos.appendChild(innerItem);\n      } else {\n        itemEleDom.appendChild(innerItem);\n      }\n    }\n    if (this.isReact) {\n      var portals = 'portals';\n      this.notify('render-react-toolbar-template', this[\"\" + portals]);\n      this.renderReactTemplates();\n    }\n  };\n  /**\n   * @hidden\n   * @returns {void}\n   */\n  Toolbar.prototype.changeOrientation = function () {\n    var ele = this.element;\n    if (this.isVertical) {\n      ele.classList.remove(CLS_VERTICAL);\n      this.isVertical = false;\n      if (this.height === 'auto' || this.height === '100%') {\n        ele.style.height = this.height;\n      }\n      ele.setAttribute('aria-orientation', 'horizontal');\n    } else {\n      ele.classList.add(CLS_VERTICAL);\n      this.isVertical = true;\n      ele.setAttribute('aria-orientation', 'vertical');\n      setStyle(this.element, {\n        'height': formatUnit(this.height),\n        'width': formatUnit(this.width)\n      });\n    }\n    this.destroyMode();\n    this.refreshOverflow();\n  };\n  Toolbar.prototype.initScroll = function (element, innerItems) {\n    if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {\n      if (this.tbarAlign) {\n        this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');\n      }\n      if (this.isVertical) {\n        this.scrollModule = new VScroll({\n          scrollStep: this.scrollStep,\n          enableRtl: this.enableRtl\n        }, innerItems[0]);\n      } else {\n        this.scrollModule = new HScroll({\n          scrollStep: this.scrollStep,\n          enableRtl: this.enableRtl\n        }, innerItems[0]);\n      }\n      if (this.cssClass) {\n        addClass([innerItems[0]], this.cssClass.split(' '));\n      }\n      this.remove(this.scrollModule.element, CLS_TBARPOS);\n      setStyle(this.element, {\n        overflow: 'hidden'\n      });\n    }\n  };\n  Toolbar.prototype.itemWidthCal = function (items) {\n    var _this = this;\n    var width = 0;\n    var style;\n    [].slice.call(selectAll('.' + CLS_ITEM, items)).forEach(function (el) {\n      if (isVisible(el)) {\n        style = window.getComputedStyle(el);\n        width += _this.isVertical ? el.offsetHeight : el.offsetWidth;\n        width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);\n        width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);\n      }\n    });\n    return width;\n  };\n  Toolbar.prototype.getScrollCntEle = function (innerItem) {\n    var trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';\n    return innerItem.querySelector(trgClass);\n  };\n  Toolbar.prototype.checkOverflow = function (element, innerItem) {\n    if (isNOU(element) || isNOU(innerItem) || !isVisible(element)) {\n      return false;\n    }\n    var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;\n    var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;\n    if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {\n      itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);\n    }\n    var popNav = element.querySelector('.' + CLS_TBARNAV);\n    var scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);\n    var navEleWidth = 0;\n    if (popNav) {\n      navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;\n    } else if (scrollNav) {\n      navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;\n    }\n    if (itemWidth > eleWidth - navEleWidth) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Refresh the whole Toolbar component without re-rendering.\n   * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.\n   * - It will refresh the Toolbar component after loading items dynamically.\n   *\n   * @returns {void}.\n   */\n  Toolbar.prototype.refreshOverflow = function () {\n    this.resize();\n  };\n  Toolbar.prototype.toolbarAlign = function (innerItems) {\n    if (this.tbarAlign) {\n      this.add(innerItems, CLS_TBARPOS);\n      this.itemPositioning();\n    }\n  };\n  Toolbar.prototype.renderOverflowMode = function () {\n    var ele = this.element;\n    var innerItems = ele.querySelector('.' + CLS_ITEMS);\n    var priorityCheck = this.popupPriCount > 0;\n    if (ele && ele.children.length > 0) {\n      this.offsetWid = ele.offsetWidth;\n      this.remove(this.element, 'e-toolpop');\n      if (Browser.info.name === 'msie' && this.height === 'auto') {\n        ele.style.height = '';\n      }\n      switch (this.overflowMode) {\n        case 'Scrollable':\n          if (isNOU(this.scrollModule)) {\n            this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));\n          }\n          break;\n        case 'Popup':\n          this.add(this.element, 'e-toolpop');\n          if (this.tbarAlign) {\n            this.removePositioning();\n          }\n          if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n            this.setOverflowAttributes(ele);\n          }\n          this.toolbarAlign(innerItems);\n          break;\n        case 'MultiRow':\n          this.add(innerItems, CLS_MULTIROW);\n          if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {\n            this.removePositioning();\n            this.add(innerItems, CLS_MULTIROWPOS);\n          }\n          if (ele.style.overflow === 'hidden') {\n            ele.style.overflow = '';\n          }\n          if (Browser.info.name === 'msie' || ele.style.height !== 'auto') {\n            ele.style.height = 'auto';\n          }\n          break;\n        case 'Extended':\n          this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);\n          if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n            if (this.tbarAlign) {\n              this.removePositioning();\n            }\n            this.setOverflowAttributes(ele);\n          }\n          this.toolbarAlign(innerItems);\n      }\n    }\n  };\n  Toolbar.prototype.setOverflowAttributes = function (ele) {\n    this.createPopupEle(ele, [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));\n    var ariaAttr = {\n      'tabindex': '0',\n      'role': 'button',\n      'aria-haspopup': 'true',\n      'aria-label': 'overflow'\n    };\n    attributes(this.element.querySelector('.' + CLS_TBARNAV), ariaAttr);\n  };\n  Toolbar.prototype.separator = function () {\n    var element = this.element;\n    var eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));\n    var multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);\n    var extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);\n    var eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;\n    if (eleInlineItem !== null) {\n      if (this.overflowMode === 'MultiRow') {\n        eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);\n      } else if (this.overflowMode === 'Extended') {\n        eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);\n      }\n    }\n    for (var i = 0; i <= eleItem.length - 1; i++) {\n      if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {\n        if (this.overflowMode === 'MultiRow') {\n          eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);\n        } else if (this.overflowMode === 'Extended') {\n          eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);\n        }\n      }\n    }\n  };\n  Toolbar.prototype.createPopupEle = function (ele, innerEle) {\n    var innerNav = ele.querySelector('.' + CLS_TBARNAV);\n    var vertical = this.isVertical;\n    if (!innerNav) {\n      this.createPopupIcon(ele);\n    }\n    innerNav = ele.querySelector('.' + CLS_TBARNAV);\n    var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;\n    var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;\n    this.element.classList.remove('e-rtl');\n    setStyle(this.element, {\n      direction: 'initial'\n    });\n    this.checkPriority(ele, innerEle, eleWidth, true);\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    }\n    this.element.style.removeProperty('direction');\n    this.createPopup();\n  };\n  Toolbar.prototype.pushingPoppedEle = function (tbarObj, popupPri, ele, eleHeight, sepHeight) {\n    var element = tbarObj.element;\n    var poppedEle = [].slice.call(selectAll('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));\n    var nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n    var nodeIndex = 0;\n    var nodePri = 0;\n    poppedEle.forEach(function (el, index) {\n      nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n      if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {\n        if (tbarObj.tbResize && nodes.length > index) {\n          ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);\n          ++nodePri;\n        } else {\n          ele.insertBefore(el, ele.children[nodes.length]);\n          ++nodePri;\n        }\n      } else if (el.classList.contains(CLS_TBAROVERFLOW)) {\n        ele.insertBefore(el, ele.firstChild);\n        ++nodePri;\n      } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {\n        ele.insertBefore(el, ele.firstChild);\n        ++nodePri;\n      } else if (el.classList.contains(CLS_POPOVERFLOW)) {\n        popupPri.push(el);\n      } else if (tbarObj.tbResize) {\n        ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);\n        ++nodeIndex;\n      } else {\n        ele.appendChild(el);\n      }\n      if (el.classList.contains(CLS_SEPARATOR)) {\n        setStyle(el, {\n          display: '',\n          height: sepHeight + 'px'\n        });\n      } else {\n        setStyle(el, {\n          display: '',\n          height: eleHeight + 'px'\n        });\n      }\n    });\n    popupPri.forEach(function (el) {\n      ele.appendChild(el);\n    });\n    var tbarEle = selectAll('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));\n    for (var i = tbarEle.length - 1; i >= 0; i--) {\n      var tbarElement = tbarEle[parseInt(i.toString(), 10)];\n      if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {\n        setStyle(tbarElement, {\n          display: 'none'\n        });\n      } else {\n        break;\n      }\n    }\n  };\n  Toolbar.prototype.createPopup = function () {\n    var element = this.element;\n    var sepHeight;\n    var sepItem;\n    if (this.overflowMode === 'Extended') {\n      sepItem = element.querySelector('.' + CLS_SEPARATOR);\n      sepHeight = element.style.height === 'auto' || element.style.height === '' ? null : sepItem && sepItem.offsetHeight;\n    }\n    var eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');\n    var eleHeight = element.style.height === 'auto' || element.style.height === '' ? null : eleItem && eleItem.offsetHeight;\n    var ele;\n    var popupPri = [];\n    if (select('#' + element.id + '_popup.' + CLS_POPUPCLASS, element)) {\n      ele = select('#' + element.id + '_popup.' + CLS_POPUPCLASS, element);\n    } else {\n      var extendEle = this.createElement('div', {\n        id: element.id + '_popup',\n        className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS\n      });\n      var popupEle = this.createElement('div', {\n        id: element.id + '_popup',\n        className: CLS_POPUPCLASS\n      });\n      ele = this.overflowMode === 'Extended' ? extendEle : popupEle;\n    }\n    this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);\n    this.popupInit(element, ele);\n  };\n  Toolbar.prototype.getElementOffsetY = function () {\n    return this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight;\n  };\n  Toolbar.prototype.popupInit = function (element, ele) {\n    if (!this.popObj) {\n      element.appendChild(ele);\n      if (this.cssClass) {\n        addClass([ele], this.cssClass.split(' '));\n      }\n      setStyle(this.element, {\n        overflow: ''\n      });\n      var eleStyles = window.getComputedStyle(this.element);\n      var popup = new Popup(null, {\n        relateTo: this.element,\n        offsetY: this.isVertical ? 0 : this.getElementOffsetY(),\n        enableRtl: this.enableRtl,\n        open: this.popupOpen.bind(this),\n        close: this.popupClose.bind(this),\n        collision: {\n          Y: this.enableCollision ? 'flip' : 'none'\n        },\n        position: this.enableRtl ? {\n          X: 'left',\n          Y: 'top'\n        } : {\n          X: 'right',\n          Y: 'top'\n        }\n      });\n      if (this.overflowMode === 'Extended') {\n        popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;\n        popup.offsetX = 0;\n      }\n      popup.appendTo(ele);\n      EventHandler.add(document, 'scroll', this.docEvent.bind(this));\n      EventHandler.add(document, 'click ', this.docEvent.bind(this));\n      popup.element.style.maxHeight = popup.element.offsetHeight + 'px';\n      if (this.isVertical) {\n        popup.element.style.visibility = 'hidden';\n      }\n      if (this.isExtendedOpen) {\n        var popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n        popupNav.classList.add(CLS_TBARNAVACT);\n        classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n        this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);\n      } else {\n        popup.hide();\n      }\n      this.popObj = popup;\n    } else {\n      var popupEle = this.popObj.element;\n      setStyle(popupEle, {\n        maxHeight: '',\n        display: 'block'\n      });\n      setStyle(popupEle, {\n        maxHeight: popupEle.offsetHeight + 'px',\n        display: ''\n      });\n    }\n  };\n  Toolbar.prototype.tbarPopupHandler = function (isOpen) {\n    if (this.overflowMode === 'Extended') {\n      if (isOpen) {\n        this.add(this.element, CLS_EXTENDEDPOPOPEN);\n      } else {\n        this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n      }\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Toolbar.prototype.popupOpen = function (e) {\n    var popObj = this.popObj;\n    if (!this.isVertical) {\n      popObj.offsetY = this.getElementOffsetY();\n      popObj.dataBind();\n    }\n    var popupEle = this.popObj.element;\n    var toolEle = this.popObj.element.parentElement;\n    var popupNav = toolEle.querySelector('.' + CLS_TBARNAV);\n    popupNav.setAttribute('aria-expanded', 'true');\n    setStyle(popObj.element, {\n      height: 'auto',\n      maxHeight: ''\n    });\n    popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';\n    if (this.overflowMode === 'Extended') {\n      popObj.element.style.minHeight = '';\n    }\n    var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;\n    var popIcon = popupNav.firstElementChild;\n    popupNav.classList.add(CLS_TBARNAVACT);\n    classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n    this.tbarPopupHandler(true);\n    var scrollVal = isNOU(window.scrollY) ? 0 : window.scrollY;\n    if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {\n      var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);\n      popObj.height = overflowHeight + 'px';\n      for (var i = 0; i <= popupEle.childElementCount; i++) {\n        var ele = popupEle.children[parseInt(i.toString(), 10)];\n        if (ele.offsetTop + ele.offsetHeight > overflowHeight) {\n          overflowHeight = ele.offsetTop;\n          break;\n        }\n      }\n      setStyle(popObj.element, {\n        maxHeight: overflowHeight + 'px'\n      });\n    } else if (this.isVertical) {\n      var tbEleData = this.element.getBoundingClientRect();\n      setStyle(popObj.element, {\n        maxHeight: tbEleData.top + this.element.offsetHeight + 'px',\n        bottom: 0,\n        visibility: ''\n      });\n    }\n    if (popObj) {\n      var popupOffset = popupEle.getBoundingClientRect();\n      if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {\n        popObj.collision = {\n          Y: 'none'\n        };\n        popObj.dataBind();\n      }\n      popObj.refreshPosition();\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Toolbar.prototype.popupClose = function (e) {\n    var element = this.element;\n    var popupNav = element.querySelector('.' + CLS_TBARNAV);\n    popupNav.setAttribute('aria-expanded', 'false');\n    var popIcon = popupNav.firstElementChild;\n    popupNav.classList.remove(CLS_TBARNAVACT);\n    classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);\n    this.tbarPopupHandler(false);\n  };\n  Toolbar.prototype.checkPriority = function (ele, inEle, eleWidth, pre) {\n    var popPriority = this.popupPriCount > 0;\n    var len = inEle.length;\n    var eleWid = eleWidth;\n    var eleOffset;\n    var checkoffset;\n    var sepCheck = 0;\n    var itemCount = 0;\n    var itemPopCount = 0;\n    var checkClass = function checkClass(ele, val) {\n      var rVal = false;\n      val.forEach(function (cls) {\n        if (ele.classList.contains(cls)) {\n          rVal = true;\n        }\n      });\n      return rVal;\n    };\n    for (var i = len - 1; i >= 0; i--) {\n      var mrgn = void 0;\n      var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);\n      if (this.isVertical) {\n        mrgn = parseFloat(compuStyle.marginTop);\n        mrgn += parseFloat(compuStyle.marginBottom);\n      } else {\n        mrgn = parseFloat(compuStyle.marginRight);\n        mrgn += parseFloat(compuStyle.marginLeft);\n      }\n      var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];\n      if (fstEleCheck) {\n        this.tbarEleMrgn = mrgn;\n      }\n      eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;\n      var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;\n      if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {\n        inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);\n        if (this.isVertical) {\n          setStyle(inEle[parseInt(i.toString(), 10)], {\n            display: 'none',\n            minHeight: eleWid_1 + 'px'\n          });\n        } else {\n          setStyle(inEle[parseInt(i.toString(), 10)], {\n            display: 'none',\n            minWidth: eleWid_1 + 'px'\n          });\n        }\n        itemPopCount++;\n      }\n      if (this.isVertical) {\n        checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;\n      } else {\n        checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;\n      }\n      if (checkoffset) {\n        if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {\n          if (this.overflowMode === 'Extended') {\n            var sepEle = inEle[parseInt(i.toString(), 10)];\n            if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n              inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);\n              itemPopCount++;\n            }\n            itemCount++;\n          } else if (this.overflowMode === 'Popup') {\n            if (sepCheck > 0 && itemCount === itemPopCount) {\n              var sepEle = inEle[i + itemCount + (sepCheck - 1)];\n              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                setStyle(sepEle, {\n                  display: 'none'\n                });\n              }\n            }\n            sepCheck++;\n            itemCount = 0;\n            itemPopCount = 0;\n          }\n        } else {\n          itemCount++;\n        }\n        if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {\n          eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;\n        } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);\n          if (this.isVertical) {\n            setStyle(inEle[parseInt(i.toString(), 10)], {\n              display: 'none',\n              minHeight: eleWid_1 + 'px'\n            });\n          } else {\n            setStyle(inEle[parseInt(i.toString(), 10)], {\n              display: 'none',\n              minWidth: eleWid_1 + 'px'\n            });\n          }\n          itemPopCount++;\n        } else {\n          eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;\n        }\n      }\n    }\n    if (pre) {\n      var popedEle = selectAll('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);\n      this.checkPriority(ele, popedEle, eleWid, false);\n    }\n  };\n  Toolbar.prototype.createPopupIcon = function (element) {\n    var id = element.id.concat('_nav');\n    var className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);\n    className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;\n    var nav = this.createElement('div', {\n      id: id,\n      className: className\n    });\n    if (Browser.info.name === 'msie' || Browser.info.name === 'edge') {\n      nav.classList.add('e-ie-align');\n    }\n    var navItem = this.createElement('div', {\n      className: CLS_POPUPDOWN + ' e-icons'\n    });\n    nav.appendChild(navItem);\n    nav.setAttribute('tabindex', '0');\n    nav.setAttribute('role', 'button');\n    element.appendChild(nav);\n  };\n  Toolbar.prototype.tbarPriRef = function (inEle, indx, sepPri, el, des, elWid, wid, ig, eleStyles) {\n    var ignoreCount = ig;\n    var popEle = this.popObj.element;\n    var query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';\n    var priEleCnt = selectAll('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;\n    var checkClass = function checkClass(ele, val) {\n      return ele.classList.contains(val);\n    };\n    if (selectAll(query, inEle).length === 0) {\n      var eleSep = inEle.children[indx - (indx - sepPri) - 1];\n      var ignoreCheck = !isNOU(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);\n      if (!isNOU(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {\n        eleSep.style.display = 'unset';\n        var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;\n        var prevSep = eleSep.previousElementSibling;\n        if (elWid + eleSepWidth < wid || des) {\n          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);\n          if (!isNOU(prevSep)) {\n            prevSep.style.display = '';\n          }\n        } else {\n          setStyle(el, eleStyles);\n          if (prevSep.classList.contains(CLS_SEPARATOR)) {\n            prevSep.style.display = 'none';\n          }\n        }\n        eleSep.style.display = '';\n      } else {\n        inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);\n      }\n    } else {\n      inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);\n    }\n  };\n  Toolbar.prototype.popupRefresh = function (popupEle, destroy) {\n    var _this = this;\n    var ele = this.element;\n    var isVer = this.isVertical;\n    var innerEle = ele.querySelector('.' + CLS_ITEMS);\n    var popNav = ele.querySelector('.' + CLS_TBARNAV);\n    if (isNOU(popNav)) {\n      return;\n    }\n    innerEle.removeAttribute('style');\n    popupEle.style.display = 'block';\n    var dimension;\n    if (isVer) {\n      dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);\n    } else {\n      dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);\n    }\n    var popupEleWidth = 0;\n    [].slice.call(popupEle.children).forEach(function (el) {\n      popupEleWidth += _this.popupEleWidth(el);\n      setStyle(el, {\n        'position': ''\n      });\n    });\n    if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {\n      destroy = true;\n    }\n    this.popupEleRefresh(dimension, popupEle, destroy);\n    popupEle.style.display = '';\n    if (popupEle.children.length === 0 && popNav && this.popObj) {\n      detach(popNav);\n      popNav = null;\n      this.popObj.destroy();\n      detach(this.popObj.element);\n      this.popObj = null;\n    }\n  };\n  Toolbar.prototype.ignoreEleFetch = function (index, innerEle) {\n    var ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));\n    var ignoreInx = [];\n    var count = 0;\n    if (ignoreEle.length > 0) {\n      ignoreEle.forEach(function (ele) {\n        ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));\n      });\n    } else {\n      return 0;\n    }\n    ignoreInx.forEach(function (val) {\n      if (val <= index) {\n        count++;\n      }\n    });\n    return count;\n  };\n  Toolbar.prototype.checkPopupRefresh = function (root, popEle) {\n    popEle.style.display = 'block';\n    var elWid = this.popupEleWidth(popEle.firstElementChild);\n    popEle.firstElementChild.style.removeProperty('Position');\n    var tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;\n    var tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;\n    popEle.style.removeProperty('display');\n    if (tbarWidth > elWid + tbarItemsWid) {\n      return true;\n    }\n    return false;\n  };\n  Toolbar.prototype.popupEleWidth = function (el) {\n    el.style.position = 'absolute';\n    var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;\n    var btnText = el.querySelector('.' + CLS_TBARBTNTEXT);\n    if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {\n      var btn = el.children[0];\n      if (!isNOU(btnText) && el.classList.contains(CLS_TBARTEXT)) {\n        btnText.style.display = 'none';\n      } else if (!isNOU(btnText) && el.classList.contains(CLS_POPUPTEXT)) {\n        btnText.style.display = 'block';\n      }\n      btn.style.minWidth = '0%';\n      elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);\n      btn.style.minWidth = '';\n      btn.style.minHeight = '';\n      if (!isNOU(btnText)) {\n        btnText.style.display = '';\n      }\n    }\n    return elWidth;\n  };\n  Toolbar.prototype.popupEleRefresh = function (width, popupEle, destroy) {\n    var popPriority = this.popupPriCount > 0;\n    var eleSplice = this.tbarEle;\n    var priEleCnt;\n    var index;\n    var innerEle = this.element.querySelector('.' + CLS_ITEMS);\n    var ignoreCount = 0;\n    var _loop_1 = function _loop_1(el) {\n      if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {\n        return \"continue\";\n      }\n      var elWidth = this_1.popupEleWidth(el);\n      if (el === this_1.tbarEle[0]) {\n        elWidth += this_1.tbarEleMrgn;\n      }\n      el.style.position = '';\n      if (elWidth < width || destroy) {\n        var inlineStyles = {\n          minWidth: el.style.minWidth,\n          height: el.style.height,\n          minHeight: el.style.minHeight\n        };\n        setStyle(el, {\n          minWidth: '',\n          height: '',\n          minHeight: ''\n        });\n        if (!el.classList.contains(CLS_POPOVERFLOW)) {\n          el.classList.remove(CLS_POPUP);\n        }\n        index = this_1.tbarEle.indexOf(el);\n        if (this_1.tbarAlign) {\n          var pos = this_1.items[parseInt(index.toString(), 10)].align;\n          index = this_1.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);\n          eleSplice = this_1.tbarAlgEle[(pos + 's').toLowerCase()];\n          innerEle = this_1.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());\n        }\n        var sepBeforePri_1 = 0;\n        if (this_1.overflowMode !== 'Extended') {\n          eleSplice.slice(0, index).forEach(function (el) {\n            if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {\n              if (el.classList.contains(CLS_SEPARATOR)) {\n                el.style.display = '';\n                width -= el.offsetWidth;\n              }\n              sepBeforePri_1++;\n            }\n          });\n        }\n        ignoreCount = this_1.ignoreEleFetch(index, innerEle);\n        if (el.classList.contains(CLS_TBAROVERFLOW)) {\n          this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount, inlineStyles);\n          width -= el.offsetWidth;\n        } else if (index === 0) {\n          innerEle.insertBefore(el, innerEle.firstChild);\n          width -= el.offsetWidth;\n        } else {\n          priEleCnt = selectAll('.' + CLS_TBAROVERFLOW, this_1.popObj.element).length;\n          innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]);\n          width -= el.offsetWidth;\n        }\n        el.style.height = '';\n      } else {\n        return \"break\";\n      }\n    };\n    var this_1 = this;\n    for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {\n      var el = _a[_i];\n      var state_1 = _loop_1(el);\n      if (state_1 === \"break\") break;\n    }\n    var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);\n    if (checkOverflow && !destroy) {\n      this.renderOverflowMode();\n    }\n  };\n  Toolbar.prototype.removePositioning = function () {\n    var item = this.element.querySelector('.' + CLS_ITEMS);\n    if (isNOU(item) || !item.classList.contains(CLS_TBARPOS)) {\n      return;\n    }\n    this.remove(item, CLS_TBARPOS);\n    var innerItem = [].slice.call(item.childNodes);\n    innerItem[1].removeAttribute('style');\n    innerItem[2].removeAttribute('style');\n  };\n  Toolbar.prototype.refreshPositioning = function () {\n    var item = this.element.querySelector('.' + CLS_ITEMS);\n    this.add(item, CLS_TBARPOS);\n    this.itemPositioning();\n  };\n  Toolbar.prototype.itemPositioning = function () {\n    var item = this.element.querySelector('.' + CLS_ITEMS);\n    var margin;\n    if (isNOU(item) || !item.classList.contains(CLS_TBARPOS)) {\n      return;\n    }\n    var popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n    var innerItem;\n    if (this.scrollModule) {\n      var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;\n      innerItem = [].slice.call(item.querySelector('.' + trgClass).children);\n    } else {\n      innerItem = [].slice.call(item.childNodes);\n    }\n    if (this.isVertical) {\n      margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;\n    } else {\n      margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;\n    }\n    var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;\n    if (popupNav) {\n      tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;\n      var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';\n      innerItem[2].removeAttribute('style');\n      if (this.isVertical) {\n        if (this.enableRtl) {\n          innerItem[2].style.top = popWid;\n        } else {\n          innerItem[2].style.bottom = popWid;\n        }\n      } else {\n        if (this.enableRtl) {\n          innerItem[2].style.left = popWid;\n        } else {\n          innerItem[2].style.right = popWid;\n        }\n      }\n    }\n    if (tbarWid <= margin) {\n      return;\n    }\n    var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;\n    innerItem[1].removeAttribute('style');\n    var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + 'px';\n    if (this.isVertical) {\n      if (this.enableRtl) {\n        innerItem[1].style.marginBottom = mrgn;\n      } else {\n        innerItem[1].style.marginTop = mrgn;\n      }\n    } else {\n      if (this.enableRtl) {\n        innerItem[1].style.marginRight = mrgn;\n      } else {\n        innerItem[1].style.marginLeft = mrgn;\n      }\n    }\n  };\n  Toolbar.prototype.tbarItemAlign = function (item, itemEle, pos) {\n    var _this = this;\n    if (item.showAlwaysInPopup && item.overflow !== 'Show') {\n      return;\n    }\n    var alignDiv = [];\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARLEFT\n    }));\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARCENTER\n    }));\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARRIGHT\n    }));\n    if (pos === 0 && item.align !== 'Left') {\n      alignDiv.forEach(function (ele) {\n        itemEle.appendChild(ele);\n      });\n      this.tbarAlign = true;\n      this.add(itemEle, CLS_TBARPOS);\n    } else if (item.align !== 'Left') {\n      var alignEle = itemEle.childNodes;\n      var leftAlign_1 = alignDiv[0];\n      [].slice.call(alignEle).forEach(function (el) {\n        _this.tbarAlgEle.lefts.push(el);\n        leftAlign_1.appendChild(el);\n      });\n      itemEle.appendChild(leftAlign_1);\n      itemEle.appendChild(alignDiv[1]);\n      itemEle.appendChild(alignDiv[2]);\n      this.tbarAlign = true;\n      this.add(itemEle, CLS_TBARPOS);\n    }\n  };\n  Toolbar.prototype.ctrlTemplate = function () {\n    var _this = this;\n    this.ctrlTem = this.trgtEle.cloneNode(true);\n    this.add(this.trgtEle, CLS_ITEMS);\n    this.tbarEle = [];\n    var innerEle = [].slice.call(this.trgtEle.children);\n    innerEle.forEach(function (ele) {\n      if (ele.tagName === 'DIV') {\n        _this.tbarEle.push(ele);\n        if (!isNOU(ele.firstElementChild)) {\n          ele.firstElementChild.setAttribute('aria-disabled', 'false');\n        }\n        _this.add(ele, CLS_ITEM);\n      }\n    });\n  };\n  Toolbar.prototype.renderItems = function () {\n    var ele = this.element;\n    var items = this.items;\n    if (this.trgtEle != null) {\n      this.ctrlTemplate();\n    } else if (ele && items.length > 0) {\n      var itemEleDom = void 0;\n      if (ele && ele.children.length > 0) {\n        itemEleDom = ele.querySelector('.' + CLS_ITEMS);\n      }\n      if (!itemEleDom) {\n        itemEleDom = this.createElement('div', {\n          className: CLS_ITEMS\n        });\n      }\n      this.itemsAlign(items, itemEleDom);\n      ele.appendChild(itemEleDom);\n    }\n  };\n  Toolbar.prototype.setAttr = function (attr, element) {\n    var key = Object.keys(attr);\n    var keyVal;\n    for (var i = 0; i < key.length; i++) {\n      keyVal = key[parseInt(i.toString(), 10)];\n      if (keyVal === 'class') {\n        this.add(element, attr[\"\" + keyVal]);\n      } else {\n        element.setAttribute(keyVal, attr[\"\" + keyVal]);\n      }\n    }\n  };\n  /**\n   * Enables or disables the specified Toolbar item.\n   *\n   * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.\n   * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.\n   * By default, `isEnable` is set to true.\n   * @returns {void}.\n   */\n  Toolbar.prototype.enableItems = function (items, isEnable) {\n    var elements = items;\n    var len = elements.length;\n    var ele;\n    if (isNOU(isEnable)) {\n      isEnable = true;\n    }\n    var enable = function enable(isEnable, ele) {\n      if (isEnable) {\n        ele.classList.remove(CLS_DISABLE);\n        if (!isNOU(ele.firstElementChild)) {\n          ele.firstElementChild.setAttribute('aria-disabled', 'false');\n        }\n      } else {\n        ele.classList.add(CLS_DISABLE);\n        if (!isNOU(ele.firstElementChild)) {\n          ele.firstElementChild.setAttribute('aria-disabled', 'true');\n        }\n      }\n    };\n    if (!isNOU(len) && len >= 1) {\n      for (var a = 0, element = [].slice.call(elements); a < len; a++) {\n        var itemElement = element[parseInt(a.toString(), 10)];\n        if (typeof itemElement === 'number') {\n          ele = this.getElementByIndex(itemElement);\n          if (isNOU(ele)) {\n            return;\n          } else {\n            elements[parseInt(a.toString(), 10)] = ele;\n          }\n        } else {\n          ele = itemElement;\n        }\n        enable(isEnable, ele);\n      }\n      if (isEnable) {\n        removeClass(elements, CLS_DISABLE);\n      } else {\n        addClass(elements, CLS_DISABLE);\n      }\n    } else {\n      if (typeof elements === 'number') {\n        ele = this.getElementByIndex(elements);\n        if (isNOU(ele)) {\n          return;\n        }\n      } else {\n        ele = items;\n      }\n      enable(isEnable, ele);\n    }\n  };\n  Toolbar.prototype.getElementByIndex = function (index) {\n    if (this.tbarEle[parseInt(index.toString(), 10)]) {\n      return this.tbarEle[parseInt(index.toString(), 10)];\n    }\n    return null;\n  };\n  /**\n   * Adds new items to the Toolbar that accepts an array as Toolbar items.\n   *\n   * @param  {ItemModel[]} items - DOM element or an array of items to be added to the Toolbar.\n   * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.\n   * @returns {void}.\n   */\n  Toolbar.prototype.addItems = function (items, index) {\n    var innerItems;\n    this.extendedOpen();\n    var itemsDiv = this.element.querySelector('.' + CLS_ITEMS);\n    if (isNOU(itemsDiv)) {\n      this.itemsRerender(items);\n      return;\n    }\n    var innerEle;\n    var itemAgn = 'Left';\n    if (isNOU(index)) {\n      index = 0;\n    }\n    items.forEach(function (e) {\n      if (!isNOU(e.align) && e.align !== 'Left' && itemAgn === 'Left') {\n        itemAgn = e.align;\n      }\n    });\n    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n      var item = items_1[_i];\n      if (isNOU(item.type)) {\n        item.type = 'Button';\n      }\n      innerItems = selectAll('.' + CLS_ITEM, this.element);\n      item.align = itemAgn;\n      innerEle = this.renderSubComponent(item, index);\n      if (this.tbarEle.length >= index && innerItems.length >= 0) {\n        if (isNOU(this.scrollModule)) {\n          this.destroyMode();\n        }\n        var algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;\n        var ele = void 0;\n        if (!this.tbarAlign && itemAgn !== 'Left') {\n          this.tbarItemAlign(item, itemsDiv, 1);\n          this.tbarAlign = true;\n          ele = closest(innerItems[0], '.' + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];\n          ele.appendChild(innerEle);\n          this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);\n          this.refreshPositioning();\n        } else if (this.tbarAlign) {\n          ele = closest(innerItems[0], '.' + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];\n          ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);\n          this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);\n          this.refreshPositioning();\n        } else if (innerItems.length === 0) {\n          innerItems = selectAll('.' + CLS_ITEMS, this.element);\n          innerItems[0].appendChild(innerEle);\n        } else {\n          innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);\n        }\n        this.items.splice(index, 0, item);\n        if (item.template) {\n          this.tbarEle.splice(this.tbarEle.length - 1, 1);\n        }\n        this.tbarEle.splice(index, 0, innerEle);\n        index++;\n        this.offsetWid = itemsDiv.offsetWidth;\n      }\n    }\n    itemsDiv.style.width = '';\n    this.renderOverflowMode();\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\n   * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.\n   *\n   * @param  {number|HTMLElement|NodeList|HTMLElement[]} args\n   * Index or DOM element or an Array of item which is to be removed from the Toolbar.\n   * @returns {void}.\n   */\n  Toolbar.prototype.removeItems = function (args) {\n    var elements = args;\n    var index;\n    var innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n    if (typeof elements === 'number') {\n      index = parseInt(args.toString(), 10);\n      this.removeItemByIndex(index, innerItems);\n    } else {\n      if (elements && elements.length > 1) {\n        for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {\n          var ele = _a[_i];\n          index = this.tbarEle.indexOf(ele);\n          this.removeItemByIndex(index, innerItems);\n          innerItems = selectAll('.' + CLS_ITEM, this.element);\n        }\n      } else {\n        var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;\n        index = innerItems.indexOf(ele);\n        this.removeItemByIndex(index, innerItems);\n      }\n    }\n    this.resize();\n  };\n  Toolbar.prototype.removeItemByIndex = function (index, innerItems) {\n    if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {\n      var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);\n      if (this.tbarAlign) {\n        var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + 's').toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);\n        this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + 's').toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);\n      }\n      if (this.isReact) {\n        this.clearToolbarTemplate(innerItems[parseInt(index.toString(), 10)]);\n      }\n      var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector('.e-control.e-btn');\n      if (!isNOU(btnItem) && !isNOU(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {\n        btnItem.ej2_instances[0].destroy();\n      }\n      detach(innerItems[parseInt(index.toString(), 10)]);\n      this.items.splice(eleIdx, 1);\n      this.tbarEle.splice(eleIdx, 1);\n    }\n  };\n  Toolbar.prototype.templateRender = function (templateProp, innerEle, item, index) {\n    var itemType = item.type;\n    var eleObj = templateProp;\n    var isComponent;\n    if (typeof templateProp === 'object') {\n      isComponent = typeof eleObj.appendTo === 'function';\n    }\n    if (typeof templateProp === 'string' || !isComponent) {\n      var templateFn = void 0;\n      var val = templateProp;\n      var regEx = new RegExp(/<(?=.*? .*?\\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\\/\\1>/i);\n      val = typeof templateProp === 'string' ? templateProp.trim() : templateProp;\n      try {\n        if (typeof templateProp === 'object' && !isNOU(templateProp.tagName)) {\n          innerEle.appendChild(templateProp);\n        } else if (typeof templateProp === 'string' && regEx.test(val)) {\n          innerEle.innerHTML = val;\n        } else if (document.querySelectorAll(val).length) {\n          var ele = document.querySelector(val);\n          var tempStr = ele.outerHTML.trim();\n          innerEle.appendChild(ele);\n          ele.style.display = '';\n          if (!isNOU(tempStr)) {\n            this.tempId.push(val);\n          }\n        } else {\n          templateFn = templateCompiler(val);\n        }\n      } catch (e) {\n        templateFn = templateCompiler(val);\n      }\n      var tempArray = void 0;\n      if (!isNOU(templateFn)) {\n        var toolbarTemplateID = this.element.id + index + '_template';\n        tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate);\n      }\n      if (!isNOU(tempArray) && tempArray.length > 0) {\n        [].slice.call(tempArray).forEach(function (ele) {\n          if (!isNOU(ele.tagName)) {\n            ele.style.display = '';\n          }\n          innerEle.appendChild(ele);\n        });\n      }\n    } else if (itemType === 'Input') {\n      var ele = this.createElement('input');\n      if (item.id) {\n        ele.id = item.id;\n      } else {\n        ele.id = getUniqueID('tbr-ipt');\n      }\n      innerEle.appendChild(ele);\n      eleObj.appendTo(ele);\n    }\n    this.add(innerEle, CLS_TEMPLATE);\n    this.tbarEle.push(innerEle);\n  };\n  Toolbar.prototype.buttonRendering = function (item, innerEle) {\n    var dom = this.createElement('button', {\n      className: CLS_TBARBTN\n    });\n    dom.setAttribute('type', 'button');\n    var textStr = item.text;\n    var iconCss;\n    var iconPos;\n    if (item.id) {\n      dom.id = item.id;\n    } else {\n      dom.id = getUniqueID('e-tbr-btn');\n    }\n    var btnTxt = this.createElement('span', {\n      className: 'e-tbar-btn-text'\n    });\n    if (textStr) {\n      btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;\n      dom.appendChild(btnTxt);\n      dom.classList.add('e-tbtn-txt');\n    } else {\n      this.add(innerEle, 'e-tbtn-align');\n    }\n    if (item.prefixIcon || item.suffixIcon) {\n      if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {\n        iconCss = item.prefixIcon + ' e-icons';\n        iconPos = 'Left';\n      } else {\n        iconCss = item.suffixIcon + ' e-icons';\n        iconPos = 'Right';\n      }\n    }\n    var btnObj = new Button({\n      iconCss: iconCss,\n      iconPosition: iconPos\n    });\n    btnObj.createElement = this.createElement;\n    btnObj.appendTo(dom);\n    if (item.width) {\n      setStyle(dom, {\n        'width': formatUnit(item.width)\n      });\n    }\n    return dom;\n  };\n  Toolbar.prototype.renderSubComponent = function (item, index) {\n    var dom;\n    var innerEle = this.createElement('div', {\n      className: CLS_ITEM\n    });\n    var tempDom = this.createElement('div', {\n      innerHTML: this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText\n    });\n    if (!this.tbarEle) {\n      this.tbarEle = [];\n    }\n    if (item.htmlAttributes) {\n      this.setAttr(item.htmlAttributes, innerEle);\n    }\n    if (item.tooltipText) {\n      innerEle.setAttribute('title', tempDom.textContent);\n    }\n    if (item.cssClass) {\n      innerEle.className = innerEle.className + ' ' + item.cssClass;\n    }\n    if (item.template) {\n      this.templateRender(item.template, innerEle, item, index);\n    } else {\n      switch (item.type) {\n        case 'Button':\n          dom = this.buttonRendering(item, innerEle);\n          dom.setAttribute('tabindex', isNOU(item.tabIndex) ? '-1' : item.tabIndex.toString());\n          dom.setAttribute('data-tabindex', isNOU(item.tabIndex) ? '-1' : item.tabIndex.toString());\n          dom.setAttribute('aria-label', item.text || item.tooltipText);\n          dom.setAttribute('aria-disabled', 'false');\n          innerEle.appendChild(dom);\n          innerEle.addEventListener('click', this.itemClick.bind(this));\n          break;\n        case 'Separator':\n          this.add(innerEle, CLS_SEPARATOR);\n          break;\n      }\n    }\n    if (item.showTextOn) {\n      var sTxt = item.showTextOn;\n      if (sTxt === 'Toolbar') {\n        this.add(innerEle, CLS_POPUPTEXT);\n        this.add(innerEle, 'e-tbtn-align');\n      } else if (sTxt === 'Overflow') {\n        this.add(innerEle, CLS_TBARTEXT);\n      }\n    }\n    if (item.overflow) {\n      var overflow = item.overflow;\n      if (overflow === 'Show') {\n        this.add(innerEle, CLS_TBAROVERFLOW);\n      } else if (overflow === 'Hide') {\n        if (!innerEle.classList.contains(CLS_SEPARATOR)) {\n          this.add(innerEle, CLS_POPOVERFLOW);\n        }\n      }\n    }\n    if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {\n      this.add(innerEle, CLS_POPPRI);\n      this.popupPriCount++;\n    }\n    if (item.disabled) {\n      this.add(innerEle, CLS_DISABLE);\n    }\n    if (item.visible === false) {\n      this.add(innerEle, CLS_HIDDEN);\n    }\n    return innerEle;\n  };\n  Toolbar.prototype.getDataTabindex = function (ele) {\n    return isNOU(ele.getAttribute('data-tabindex')) ? '-1' : ele.getAttribute('data-tabindex');\n  };\n  Toolbar.prototype.itemClick = function (e) {\n    this.activeEleSwitch(e.currentTarget);\n  };\n  Toolbar.prototype.activeEleSwitch = function (ele) {\n    this.activeEleRemove(ele.firstElementChild);\n    this.activeEle.focus();\n  };\n  Toolbar.prototype.activeEleRemove = function (curEle) {\n    if (!isNOU(this.activeEle)) {\n      this.activeEle.setAttribute('tabindex', this.getDataTabindex(this.activeEle));\n    }\n    this.activeEle = curEle;\n    if (this.getDataTabindex(this.activeEle) === '-1') {\n      if (isNOU(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {\n        this.updateTabIndex('-1');\n        curEle.removeAttribute('tabindex');\n      } else {\n        this.activeEle.setAttribute('tabindex', this.getDataTabindex(this.activeEle));\n      }\n    }\n  };\n  Toolbar.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - Returns the module name as string.\n   * @private\n   */\n  Toolbar.prototype.getModuleName = function () {\n    return 'toolbar';\n  };\n  Toolbar.prototype.itemsRerender = function (newProp) {\n    this.items = this.tbarItemsCol;\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n    this.destroyMode();\n    this.destroyItems();\n    this.items = newProp;\n    this.tbarItemsCol = this.items;\n    this.renderItems();\n    this.renderOverflowMode();\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  Toolbar.prototype.resize = function () {\n    var ele = this.element;\n    this.tbResize = true;\n    if (this.tbarAlign) {\n      this.itemPositioning();\n    }\n    if (this.popObj && this.overflowMode === 'Popup') {\n      this.popObj.hide();\n    }\n    var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);\n    if (!checkOverflow) {\n      this.destroyScroll();\n      var multirowele = ele.querySelector('.' + CLS_ITEMS);\n      if (!isNOU(multirowele)) {\n        this.remove(multirowele, CLS_MULTIROWPOS);\n        if (this.tbarAlign) {\n          this.add(multirowele, CLS_TBARPOS);\n        }\n      }\n    }\n    if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {\n      return;\n    }\n    if (this.offsetWid > ele.offsetWidth || checkOverflow) {\n      this.renderOverflowMode();\n    }\n    if (this.popObj) {\n      if (this.overflowMode === 'Extended') {\n        var eleStyles = window.getComputedStyle(this.element);\n        this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;\n      }\n      if (this.tbarAlign) {\n        this.removePositioning();\n      }\n      this.popupRefresh(this.popObj.element, false);\n      if (this.tbarAlign) {\n        this.refreshPositioning();\n      }\n    }\n    if (this.element.querySelector('.' + CLS_HSCROLLBAR)) {\n      this.scrollStep = this.element.querySelector('.' + CLS_HSCROLLBAR).offsetWidth;\n    }\n    this.offsetWid = ele.offsetWidth;\n    this.tbResize = false;\n    this.separator();\n  };\n  Toolbar.prototype.orientationChange = function () {\n    var _this = this;\n    setTimeout(function () {\n      _this.resize();\n    }, 500);\n  };\n  Toolbar.prototype.extendedOpen = function () {\n    var sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n    if (this.overflowMode === 'Extended' && sib) {\n      this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);\n    }\n  };\n  Toolbar.prototype.updateHideEleTabIndex = function (ele, isHidden, isElement, eleIndex, innerItems) {\n    if (isElement) {\n      eleIndex = innerItems.indexOf(ele);\n    }\n    var nextEle = innerItems[++eleIndex];\n    while (nextEle) {\n      var skipEle = this.eleContains(nextEle);\n      if (!skipEle) {\n        var dataTabIndex = nextEle.firstElementChild.getAttribute('data-tabindex');\n        if (isHidden && dataTabIndex === '-1') {\n          nextEle.firstElementChild.setAttribute('tabindex', '0');\n        } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute('tabindex')) {\n          nextEle.firstElementChild.setAttribute('tabindex', dataTabIndex);\n        }\n        break;\n      }\n      nextEle = innerItems[++eleIndex];\n    }\n  };\n  Toolbar.prototype.clearToolbarTemplate = function (templateEle) {\n    if (this.registeredTemplate && this.registeredTemplate[\"\" + 'template']) {\n      var registeredTemplates = this.registeredTemplate;\n      for (var index = 0; index < registeredTemplates[\"\" + 'template'].length; index++) {\n        var registeredItem = registeredTemplates[\"\" + 'template'][parseInt(index.toString(), 10)].rootNodes[0];\n        var closestItem = closest(registeredItem, '.' + CLS_ITEM);\n        if (!isNOU(closestItem) && closestItem === templateEle) {\n          this.clearTemplate(['template'], [registeredTemplates[\"\" + 'template'][parseInt(index.toString(), 10)]]);\n          break;\n        }\n      }\n    } else if (this.portals && this.portals.length > 0) {\n      var portals = this.portals;\n      for (var index = 0; index < portals.length; index++) {\n        var portalItem = portals[parseInt(index.toString(), 10)];\n        var closestItem = closest(portalItem.containerInfo, '.' + CLS_ITEM);\n        if (!isNOU(closestItem) && closestItem === templateEle) {\n          this.clearTemplate(['template'], index);\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n   *\n   * @param  {ToolbarModel} newProp - It contains new value of the data.\n   * @param  {ToolbarModel} oldProp - It contains old value of the data.\n   * @returns {void}\n   * @private\n   */\n  Toolbar.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var tEle = this.element;\n    var wid = tEle.offsetWidth;\n    this.extendedOpen();\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n      switch (prop) {\n        case 'items':\n          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            var changedProb = Object.keys(newProp.items);\n            for (var i = 0; i < changedProb.length; i++) {\n              var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);\n              var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];\n              var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])[\"\" + property];\n              if (this.tbarAlign || property === 'align') {\n                this.refresh();\n                this.trigger('created');\n                break;\n              }\n              var popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;\n              var booleanCheck = property === 'overflow' && this.popupPriCount !== 0;\n              if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {\n                --this.popupPriCount;\n              }\n              if (isNOU(this.scrollModule)) {\n                this.destroyMode();\n              }\n              var itemCol = [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));\n              if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {\n                this.clearToolbarTemplate(itemCol[parseInt(index.toString(), 10)]);\n              }\n              detach(itemCol[parseInt(index.toString(), 10)]);\n              this.tbarEle.splice(index, 1);\n              this.addItems([this.items[parseInt(index.toString(), 10)]], index);\n              this.items.splice(index, 1);\n              if (this.items[parseInt(index.toString(), 10)].template) {\n                this.tbarEle.splice(this.items.length, 1);\n              }\n            }\n          } else {\n            this.itemsRerender(newProp.items);\n          }\n          break;\n        case 'width':\n          setStyle(tEle, {\n            'width': formatUnit(newProp.width)\n          });\n          this.refreshOverflow();\n          break;\n        case 'height':\n          setStyle(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n        case 'overflowMode':\n          this.destroyMode();\n          this.renderOverflowMode();\n          if (this.enableRtl) {\n            this.add(tEle, CLS_RTL);\n          }\n          this.refreshOverflow();\n          break;\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.add(tEle, CLS_RTL);\n          } else {\n            this.remove(tEle, CLS_RTL);\n          }\n          if (!isNOU(this.scrollModule)) {\n            if (newProp.enableRtl) {\n              this.add(this.scrollModule.element, CLS_RTL);\n            } else {\n              this.remove(this.scrollModule.element, CLS_RTL);\n            }\n          }\n          if (!isNOU(this.popObj)) {\n            if (newProp.enableRtl) {\n              this.add(this.popObj.element, CLS_RTL);\n            } else {\n              this.remove(this.popObj.element, CLS_RTL);\n            }\n          }\n          if (this.tbarAlign) {\n            this.itemPositioning();\n          }\n          break;\n        case 'scrollStep':\n          if (this.scrollModule) {\n            this.scrollModule.scrollStep = this.scrollStep;\n          }\n          break;\n        case 'enableCollision':\n          if (this.popObj) {\n            this.popObj.collision = {\n              Y: this.enableCollision ? 'flip' : 'none'\n            };\n          }\n          break;\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n          break;\n        case 'allowKeyboard':\n          this.unwireKeyboardEvent();\n          if (newProp.allowKeyboard) {\n            this.wireKeyboardEvent();\n          }\n          break;\n      }\n    }\n  };\n  /**\n   * Shows or hides the Toolbar item that is in the specified index.\n   *\n   * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.\n   * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.\n   * @returns {void}.\n   */\n  Toolbar.prototype.hideItem = function (index, value) {\n    var isElement = typeof index === 'object' ? true : false;\n    var eleIndex = index;\n    var ele;\n    if (!isElement && isNOU(eleIndex)) {\n      return;\n    }\n    var innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n    if (isElement) {\n      ele = index;\n    } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {\n      var innerItems_1 = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n      ele = innerItems_1[parseInt(eleIndex.toString(), 10)];\n    }\n    if (ele) {\n      if (value) {\n        ele.classList.add(CLS_HIDDEN);\n        if (!ele.classList.contains(CLS_SEPARATOR)) {\n          if (isNOU(ele.firstElementChild.getAttribute('tabindex')) || ele.firstElementChild.getAttribute('tabindex') !== '-1') {\n            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);\n          }\n        }\n      } else {\n        ele.classList.remove(CLS_HIDDEN);\n        if (!ele.classList.contains(CLS_SEPARATOR)) {\n          this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);\n        }\n      }\n      this.refreshOverflow();\n    }\n  };\n  __decorate([Collection([], Item)], Toolbar.prototype, \"items\", void 0);\n  __decorate([Property('auto')], Toolbar.prototype, \"width\", void 0);\n  __decorate([Property('auto')], Toolbar.prototype, \"height\", void 0);\n  __decorate([Property('')], Toolbar.prototype, \"cssClass\", void 0);\n  __decorate([Property('Scrollable')], Toolbar.prototype, \"overflowMode\", void 0);\n  __decorate([Property()], Toolbar.prototype, \"scrollStep\", void 0);\n  __decorate([Property(true)], Toolbar.prototype, \"enableCollision\", void 0);\n  __decorate([Property(true)], Toolbar.prototype, \"enableHtmlSanitizer\", void 0);\n  __decorate([Property(true)], Toolbar.prototype, \"allowKeyboard\", void 0);\n  __decorate([Event()], Toolbar.prototype, \"clicked\", void 0);\n  __decorate([Event()], Toolbar.prototype, \"created\", void 0);\n  __decorate([Event()], Toolbar.prototype, \"destroyed\", void 0);\n  __decorate([Event()], Toolbar.prototype, \"beforeCreate\", void 0);\n  Toolbar = __decorate([NotifyPropertyChanges], Toolbar);\n  return Toolbar;\n}(Component);\nexport { Toolbar };","map":null,"metadata":{},"sourceType":"module"}