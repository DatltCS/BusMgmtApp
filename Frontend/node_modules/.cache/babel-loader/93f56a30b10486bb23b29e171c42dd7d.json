{"ast":null,"code":"import { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { EventHandler, select, removeClass, addClass, detach, compile, L10n } from '@syncfusion/ej2-base';\nimport { Browser, attributes, isNullOrUndefined, append, closest, prepend } from '@syncfusion/ej2-base';\nimport { dropDownBaseClasses } from '../drop-down-base/drop-down-base';\nvar ICON = 'e-icons';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECK = 'e-check';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar INDETERMINATE = 'e-stop';\nvar checkAllParent = 'e-selectall-parent';\nvar searchBackIcon = 'e-input-group-icon e-back-icon e-icons';\nvar filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';\nvar filterInput = 'e-input-filter';\nvar filterParent = 'e-filter-parent';\nvar mobileFilter = 'e-ddl-device-filter';\nvar clearIcon = 'e-clear-icon';\nvar popupFullScreen = 'e-popup-full-page';\nvar device = 'e-ddl-device';\nvar FOCUS = 'e-input-focus';\n/**\n * The Multiselect enable CheckBoxSelection call this inject module.\n */\nvar CheckBoxSelection = /** @class */function () {\n  function CheckBoxSelection(parent) {\n    this.activeLi = [];\n    this.activeEle = [];\n    this.parent = parent;\n    this.removeEventListener();\n    this.addEventListener();\n  }\n  CheckBoxSelection.prototype.getModuleName = function () {\n    return 'CheckBoxSelection';\n  };\n  CheckBoxSelection.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.on('updatelist', this.listSelection, this);\n    this.parent.on('listoption', this.listOption, this);\n    this.parent.on('selectAll', this.setSelectAll, this);\n    this.parent.on('checkSelectAll', this.checkSelectAll, this);\n    this.parent.on('searchBox', this.setSearchBox, this);\n    this.parent.on('blur', this.onBlurHandler, this);\n    this.parent.on('targetElement', this.targetElement, this);\n    this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);\n    this.parent.on('inputFocus', this.getFocus, this);\n    this.parent.on('reOrder', this.setReorder, this);\n    this.parent.on('activeList', this.getActiveList, this);\n    this.parent.on('selectAllText', this.setLocale, this);\n    this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);\n    EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n    this.parent.on('addItem', this.checboxCreate, this);\n    this.parent.on('popupFullScreen', this.setPopupFullScreen, this);\n  };\n  CheckBoxSelection.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.off('updatelist', this.listSelection);\n    this.parent.off('listoption', this.listOption);\n    this.parent.off('selectAll', this.setSelectAll);\n    this.parent.off('checkSelectAll', this.checkSelectAll);\n    this.parent.off('searchBox', this.setSearchBox);\n    this.parent.off('blur', this.onBlurHandler);\n    this.parent.off('targetElement', this.targetElement);\n    this.parent.off('deviceSearchBox', this.setDeviceSearchBox);\n    this.parent.off('inputFocus', this.getFocus);\n    this.parent.off('reOrder', this.setReorder);\n    this.parent.off('activeList', this.getActiveList);\n    this.parent.off('selectAllText', this.setLocale);\n    this.parent.off('filterBarPlaceholder', this.setPlaceholder);\n    this.parent.off('addItem', this.checboxCreate);\n    this.parent.off('popupFullScreen', this.setPopupFullScreen);\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  CheckBoxSelection.prototype.listOption = function (args) {\n    var _this = this;\n    if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {\n      this.parent.listCurrentOptions.itemCreated = function (e) {\n        _this.checboxCreate(e);\n      };\n    } else {\n      var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;\n      this.parent.listCurrentOptions.itemCreated = function (e) {\n        _this.checboxCreate(e);\n        itemCreated_1.apply(_this, [e]);\n      };\n    }\n  };\n  CheckBoxSelection.prototype.setPlaceholder = function (props) {\n    Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);\n  };\n  CheckBoxSelection.prototype.checboxCreate = function (e) {\n    var item;\n    if (!isNullOrUndefined(e.item)) {\n      item = e.item;\n    } else {\n      item = e;\n    }\n    if (this.parent.enableGroupCheckBox || item.className !== 'e-list-group-item ' && item.className !== 'e-list-group-item') {\n      var checkboxEle = createCheckBox(this.parent.createElement, true);\n      var icon = select('div.' + ICON, item);\n      item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n      select('.' + CHECKBOXFRAME, checkboxEle);\n      if (this.parent.enableGroupCheckBox) {\n        this.parent.popupWrapper.classList.add('e-multiselect-group');\n      }\n      return item;\n    } else {\n      return item;\n    }\n  };\n  CheckBoxSelection.prototype.setSelectAll = function () {\n    if (this.parent.showSelectAll) {\n      if (isNullOrUndefined(this.checkAllParent)) {\n        this.checkAllParent = this.parent.createElement('div', {\n          className: checkAllParent\n        });\n        this.selectAllSpan = this.parent.createElement('span', {\n          className: 'e-all-text'\n        });\n        this.selectAllSpan.textContent = '';\n        this.checkAllParent.appendChild(this.selectAllSpan);\n        this.setLocale();\n        this.checboxCreate(this.checkAllParent);\n        if (this.parent.headerTemplate) {\n          if (!isNullOrUndefined(this.parent.filterParent)) {\n            append([this.checkAllParent], this.parent.filterParent);\n          } else {\n            append([this.checkAllParent], this.parent.popupWrapper);\n          }\n        }\n        if (!this.parent.headerTemplate) {\n          if (!isNullOrUndefined(this.parent.filterParent)) {\n            this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);\n          } else {\n            prepend([this.checkAllParent], this.parent.popupWrapper);\n          }\n        }\n        EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);\n      }\n      if (this.parent.list.classList.contains('e-nodata') || this.parent.listData && this.parent.listData.length <= 1 && !this.parent.isDynamicDataChange || this.parent.isDynamicDataChange && this.parent.listData && this.parent.listData.length <= 1) {\n        this.checkAllParent.style.display = 'none';\n      } else {\n        this.checkAllParent.style.display = 'block';\n      }\n      this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n    } else if (!isNullOrUndefined(this.checkAllParent)) {\n      this.checkAllParent.parentElement.removeChild(this.checkAllParent);\n      this.checkAllParent = null;\n    }\n  };\n  CheckBoxSelection.prototype.destroy = function () {\n    this.removeEventListener();\n    EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n    this.checkAllParent = null;\n    this.clearIconElement = null;\n    this.filterInput = null;\n    this.filterInputObj = null;\n    this.checkWrapper = null;\n    this.selectAllSpan = null;\n  };\n  CheckBoxSelection.prototype.listSelection = function (args) {\n    var target;\n    if (!isNullOrUndefined(args.e)) {\n      var frameElm = args.li.querySelector('.e-checkbox-wrapper .e-frame');\n      target = !isNullOrUndefined(args.e.target) ? args.e.target.classList.contains('e-frame') && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector('.e-checkbox-wrapper').childNodes[1] : args.li.querySelector('.e-checkbox-wrapper').childNodes[1];\n    } else {\n      var checkboxWrapper = args.li.querySelector('.e-checkbox-wrapper');\n      target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];\n    }\n    if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {\n      target = args.li.firstElementChild.childNodes[1];\n    }\n    if (!isNullOrUndefined(target)) {\n      this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n    }\n    if (!isNullOrUndefined(this.checkWrapper)) {\n      var checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n      var selectAll = false;\n      this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), args.li, args.e, selectAll);\n    }\n  };\n  CheckBoxSelection.prototype.validateCheckNode = function (checkWrap, isCheck, li, e, selectAll) {\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll);\n  };\n  CheckBoxSelection.prototype.clickHandler = function (e) {\n    var target;\n    if (e.currentTarget.classList.contains(this.checkAllParent.className)) {\n      target = e.currentTarget.firstElementChild.lastElementChild;\n    } else {\n      target = e.currentTarget;\n    }\n    this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n    var selectAll = true;\n    if (!isNullOrUndefined(this.checkWrapper)) {\n      var checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n      this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK), null, e, selectAll);\n    }\n    e.preventDefault();\n  };\n  CheckBoxSelection.prototype.changeState = function (wrapper, state, e, isPrevent, selectAll) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      ariaState = 'true';\n      if (selectAll) {\n        this.parent.selectAllItems(true, e);\n        this.setLocale(true);\n      }\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      ariaState = 'false';\n      if (selectAll) {\n        this.parent.selectAllItems(false, e);\n        this.setLocale();\n      }\n    } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE)) {\n      removeClass([frameSpan], [CHECK]);\n      frameSpan.classList.add(INDETERMINATE);\n      ariaState = 'false';\n      if (selectAll) {\n        this.parent.selectAllItems(false, e);\n        this.setLocale();\n      }\n    }\n  };\n  CheckBoxSelection.prototype.setSearchBox = function (args) {\n    if (isNullOrUndefined(this.parent.filterParent)) {\n      this.parent.filterParent = this.parent.createElement('span', {\n        className: filterParent\n      });\n      this.filterInput = this.parent.createElement('input', {\n        attrs: {\n          type: 'text'\n        },\n        className: filterInput\n      });\n      this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);\n      var backIcon = false;\n      if (Browser.isDevice) {\n        backIcon = true;\n        this.parent.mobFilter = false;\n      }\n      this.filterInputObj = Input.createInput({\n        element: this.filterInput,\n        buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],\n        properties: {\n          placeholder: this.parent.filterBarPlaceholder\n        }\n      }, this.parent.createElement);\n      if (!isNullOrUndefined(this.parent.cssClass)) {\n        if (this.parent.cssClass.split(' ').indexOf('e-outline') !== -1) {\n          addClass([this.filterInputObj.container], 'e-outline');\n        } else if (this.parent.cssClass.split(' ').indexOf('e-filled') !== -1) {\n          addClass([this.filterInputObj.container], 'e-filled');\n        }\n      }\n      append([this.filterInputObj.container], this.parent.filterParent);\n      prepend([this.parent.filterParent], args.popupElement);\n      attributes(this.filterInput, {\n        'aria-disabled': 'false',\n        'role': 'combobox',\n        'autocomplete': 'off',\n        'autocapitalize': 'off',\n        'spellcheck': 'false'\n      });\n      this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n      if (!Browser.isDevice && this.clearIconElement) {\n        EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);\n        this.clearIconElement.style.visibility = 'hidden';\n      }\n      EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);\n      EventHandler.add(this.filterInput, 'keyup', this.parent.keyUp, this.parent);\n      EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);\n      EventHandler.add(this.filterInput, 'blur', this.onBlurHandler, this);\n      EventHandler.add(this.filterInput, 'paste', this.parent.pasteHandler, this.parent);\n      this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;\n      return this.filterInputObj;\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  CheckBoxSelection.prototype.clickOnBackIcon = function (e) {\n    this.parent.hidePopup();\n    removeClass([document.body, this.parent.popupObj.element], popupFullScreen);\n    this.parent.inputElement.focus();\n  };\n  CheckBoxSelection.prototype.clearText = function (e) {\n    this.parent.targetInputElement.value = '';\n    if (this.parent.allowFiltering && this.parent.targetInputElement.value === '') {\n      this.parent.search(null);\n    }\n    this.parent.refreshPopup();\n    this.parent.refreshListItems(null);\n    this.clearIconElement.style.visibility = 'hidden';\n    this.filterInput.focus();\n    this.setReorder(e);\n    e.preventDefault();\n  };\n  CheckBoxSelection.prototype.setDeviceSearchBox = function () {\n    this.parent.popupObj.element.classList.add(device);\n    this.parent.popupObj.element.classList.add(mobileFilter);\n    this.parent.popupObj.position = {\n      X: 0,\n      Y: 0\n    };\n    this.parent.popupObj.dataBind();\n    this.setSearchBoxPosition();\n    this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');\n    this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);\n    this.clearIconElement.style.visibility = 'hidden';\n    EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n    EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n  };\n  CheckBoxSelection.prototype.setSearchBoxPosition = function () {\n    var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n    var selectAllHeight = 0;\n    if (this.checkAllParent) {\n      selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n    }\n    this.parent.popupObj.element.style.maxHeight = '100%';\n    this.parent.popupObj.element.style.width = '100%';\n    this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight + 'px';\n    this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight + 'px';\n    var clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n    detach(this.filterInput);\n    clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n  };\n  CheckBoxSelection.prototype.setPopupFullScreen = function () {\n    if (this.parent && this.parent.popupObj) {\n      attributes(this.parent.popupObj.element, {\n        style: 'left:0px;right:0px;top:0px;bottom:0px;'\n      });\n      addClass([document.body, this.parent.popupObj.element], popupFullScreen);\n      this.parent.popupObj.element.style.maxHeight = '100%';\n      this.parent.popupObj.element.style.width = '100%';\n    }\n  };\n  CheckBoxSelection.prototype.targetElement = function () {\n    if (!isNullOrUndefined(this.clearIconElement)) {\n      this.parent.targetInputElement = this.filterInput;\n      this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';\n    }\n    return this.parent.targetInputElement.value;\n  };\n  CheckBoxSelection.prototype.onBlurHandler = function (e) {\n    if (!this.parent.element.classList.contains('e-listbox')) {\n      var target = void 0;\n      if (this.parent.keyAction) {\n        return;\n      }\n      if (Browser.isIE) {\n        target = !isNullOrUndefined(e) && e.target;\n      }\n      if (!Browser.isIE) {\n        target = !isNullOrUndefined(e) && e.relatedTarget;\n      }\n      // eslint-disable-next-line max-len\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !Browser.isIE && this.filterInput) {\n        this.filterInput.focus();\n        return;\n      }\n      if (this.parent.scrollFocusStatus && this.filterInput) {\n        e.preventDefault();\n        this.filterInput.focus();\n        this.parent.scrollFocusStatus = false;\n        return;\n      }\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n        this.parent.inputFocus = false;\n        this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);\n        this.parent.dispatchEvent(this.parent.hiddenElement, 'change');\n      }\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n        this.parent.inputFocus = false;\n        this.parent.overAllWrapper.classList.remove(FOCUS);\n        this.parent.trigger('blur');\n        this.parent.focused = true;\n      }\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close') && !Browser.isDevice) {\n        this.parent.hidePopup();\n      }\n    }\n  };\n  CheckBoxSelection.prototype.onDocumentClick = function (e) {\n    if (this.parent.getLocaleName() !== 'listbox') {\n      var target = e.target;\n      if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id=\"' + this.parent.popupObj.element.id + '\"]')) {\n        if (!(this.filterInput && this.filterInput.value !== '')) {\n          e.preventDefault();\n        }\n      }\n      if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id=\"' + this.parent.popupObj.element.id + '\"]')) && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {\n        if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {\n          this.parent.inputFocus = false;\n          this.parent.scrollFocusStatus = false;\n          this.parent.hidePopup();\n          this.parent.onBlurHandler(e, true);\n          this.parent.focused = true;\n        }\n      } else {\n        this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && document.activeElement === this.filterInput;\n      }\n      if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') && !this.parent.isPopupOpen()) {\n        if (Browser.isIE) {\n          this.parent.onBlurHandler();\n        } else {\n          this.parent.onBlurHandler(e);\n        }\n      }\n      if (this.filterInput === target) {\n        this.filterInput.focus();\n      }\n    }\n  };\n  CheckBoxSelection.prototype.getFocus = function (e) {\n    this.parent.overAllWrapper.classList.remove(FOCUS);\n    if (this.parent.keyAction && e.value !== 'clear' && e.value !== 'focus') {\n      this.parent.keyAction = false;\n      return;\n    }\n    if (e.value === 'focus') {\n      this.filterInput.focus();\n      this.parent.removeFocus();\n      EventHandler.remove(this.parent.list, 'keydown', this.parent.onKeyDown);\n    }\n    if (e.value === 'clear') {\n      this.filterInput.value = '';\n      this.clearIconElement.style.visibility = 'hidden';\n    }\n  };\n  CheckBoxSelection.prototype.checkSelectAll = function (e) {\n    if (e.value === 'check') {\n      this.changeState(this.checkAllParent, e.value, null, null, false);\n      this.setLocale(true);\n    }\n    if (e.value === 'uncheck') {\n      this.changeState(this.checkAllParent, e.value, null, null, false);\n      this.setLocale();\n    }\n    if (e.value === 'indeterminate') {\n      this.changeState(this.checkAllParent, e.value, null, null, false);\n      this.setLocale();\n    }\n  };\n  CheckBoxSelection.prototype.setLocale = function (unSelect) {\n    if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {\n      var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;\n      this.selectAllSpan.textContent = '';\n      var compiledString = compile(template);\n      var templateName = unSelect ? 'unSelectAllText' : 'selectAllText';\n      for (var _i = 0, _a = compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.selectAllSpan.textContent = item.textContent;\n      }\n    } else {\n      var l10nLocale = {\n        selectAllText: 'Select All',\n        unSelectAllText: 'Unselect All'\n      };\n      var l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);\n      if (l10n.getConstant('selectAllText') === '') {\n        l10n = new L10n('dropdowns', l10nLocale, this.parent.locale);\n      }\n      this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');\n    }\n  };\n  CheckBoxSelection.prototype.getActiveList = function (args) {\n    if (args.li.classList.contains('e-active')) {\n      this.activeLi.push(args.li.cloneNode(true));\n    } else {\n      this.activeLi.splice(args.index, 1);\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  CheckBoxSelection.prototype.setReorder = function (args) {\n    if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {\n      var activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;\n      var remLi = void 0;\n      var ulEle_1 = this.parent.createElement('ul', {\n        className: 'e-list-parent e-ul e-reorder'\n      });\n      if (activeLiCount > 0) {\n        var activeListItems = this.parent.ulElement.querySelectorAll('li.e-active');\n        activeListItems.forEach(function (item) {\n          ulEle_1.appendChild(item);\n        });\n        remLi = this.parent.ulElement.querySelectorAll('li.e-active');\n        addClass(remLi, 'e-reorder-hide');\n        prepend([ulEle_1], this.parent.list);\n      }\n      this.parent.focusAtFirstListItem();\n    }\n  };\n  return CheckBoxSelection;\n}();\nexport { CheckBoxSelection };","map":null,"metadata":{},"sourceType":"module"}